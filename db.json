{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","path":"lib/pace/pace-theme-flat-top.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","path":"lib/pace/pace-theme-material.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/package.json","path":"lib/three/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/renovate.json","path":"lib/three/renovate.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"f07957d2b09c61ad7bb8dc47ba9b87eef009bedc","modified":1629910746477},{"_id":"source/about/index.md","hash":"4acea9b25fd26e8f247848f184bd1ac3ac9daa7f","modified":1629910338110},{"_id":"source/categories/index.md","hash":"fc69005f20b9d388d87a2e37ba6bddc145fd9836","modified":1629910321240},{"_id":"source/resources/index.md","hash":"84a4d9fe0770e8ee3def44688125597a4747e05b","modified":1629910344631},{"_id":"source/schedule/index.md","hash":"719c069d606f2b776e2607bd66c749a9ca8ab710","modified":1629910409149},{"_id":"source/tags/index.md","hash":"2c497fe31763b210ad5b016c68c0943e69678cf3","modified":1629910331116},{"_id":"source/sitemap/index.md","hash":"690803f9df7ada50af83b0acba595d8be429c28b","modified":1629910463622},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1629909034706},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1629909034706},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1629909034706},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1629909034717},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1629909034718},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1629909034719},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1629909034719},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1629909034720},{"_id":"themes/next/_config.yml","hash":"1c8994c7295f3efa1148b23398edc4d83f8946b1","modified":1629912212114},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1629909034722},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1629909034738},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1629909035021},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1629909034708},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1629909034708},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1629909034712},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1629909034712},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1629909034713},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1629909034714},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1629909034714},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1629909034714},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1629909034715},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1629909034715},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1629909034717},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1629909034723},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1629909034724},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1629909034723},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1629909034724},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1629909034725},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1629909034727},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1629909034727},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1629909034727},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1629909034728},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1629909034739},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1629909034740},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1629909034740},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1629909034740},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1629909034741},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1629909034742},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1629909034743},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1629909034744},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1629909034744},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1629909034745},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1629909034744},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1629909034746},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1629909034746},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1629909034746},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1629909034748},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1629909034748},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1629909034748},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1629909034749},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1629909034749},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1629909034751},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1629909034752},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1629909034751},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1629909034753},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1629909035018},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1629909035019},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1629909035020},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1629909035020},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1629909035020},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1629909035021},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1629909035036},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1629909034710},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1629909034710},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1629909034710},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1629909034710},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1629909034729},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1629909034730},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1629909034731},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1629909034731},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1629909034731},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1629909034733},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1629909034733},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1629909034732},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1629909034734},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1629909034735},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1629909034736},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1629909034736},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1629909034738},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1629909034754},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1629909034754},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1629909034755},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1629909034756},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1629909034755},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1629909034761},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1629909034764},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1629909034771},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1629909034782},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1629909035006},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1629909035010},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1629909035011},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1629909034772},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1629909034772},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1629909034773},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1629909034776},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1629909035023},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1629909034777},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1629909035031},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1629909035031},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1629909035032},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1629909035033},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1629909035033},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1629909035034},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1629909035034},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1629909035034},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1629909035035},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1629909035036},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1629909035037},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1629909035038},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1629909035038},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1629909035039},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1629909035038},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1629909035040},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1629909035041},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1629909035041},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1629909035042},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1629909035042},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1629909035082},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1629909035100},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1629909035102},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1629909035102},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1629909035103},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1629909035104},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1629909035105},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1629909035107},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1629909035107},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1629909035108},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1629909035109},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1629909035109},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1629909035110},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1629909035111},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1629909035112},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1629909035120},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1629909035113},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1629909035114},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1629909035114},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1629909035115},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1629909035116},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1629909035119},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1629909034758},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1629909034758},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1629909034759},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1629909034759},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1629909034760},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1629909034760},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1629909034761},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1629909034763},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1629909034763},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1629909034765},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1629909034766},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1629909034766},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1629909034767},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1629909034767},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1629909034768},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1629909034768},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1629909034769},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1629909034770},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1629909034779},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1629909034779},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1629909034780},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1629909034781},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1629909035002},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1629909035002},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1629909035003},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1629909035004},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1629909035004},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1629909035005},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1629909035005},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1629909035006},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1629909035007},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1629909035007},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1629909035007},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1629909035013},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1629909035014},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1629909035015},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1629909035015},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1629909035017},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1629909035012},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1629909035013},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1629909035017},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1629909035013},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1629909035018},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1629909034773},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1629909034775},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1629909034775},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1629909034776},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1629909034776},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1629909035024},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1629909035025},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1629909035024},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1629909035026},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1629909035027},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1629909035028},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1629909035029},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1629909035028},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1629909035030},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1629909035030},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1629909035030},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1629909035097},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1629909035097},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1629909035098},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1629909035099},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5ab1d000c48bc6ea0914ff952df939c3bd24d4e8","modified":1629911779274},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1629909916077},{"_id":"themes/next/source/lib/pace/README.md","hash":"6f22149ab4cd861d653970591c81670625aa1fdc","modified":1629909916083},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1629909916089},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1629909916089},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1629909916096},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1629909916102},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1629909916108},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1629909916113},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1629909916119},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1629909916136},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1629909916142},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1629909916149},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","hash":"544f038c983e2be5f7fc04ce6615f7b70e4554fe","modified":1629909916154},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1629909916155},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1629909916156},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","hash":"131747a1e6982312ae3777998a99763b684d3290","modified":1629909916162},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1629909916168},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1629909916174},{"_id":"themes/next/source/lib/three/.gitignore","hash":"5767276045f60da2350895a59aa6e138b0e83294","modified":1629910593944},{"_id":"themes/next/source/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1629910593945},{"_id":"themes/next/source/lib/three/README.md","hash":"76071f107e07113ccb23192680782577a15c5350","modified":1629910593951},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"558838e0821f76c1e6d58add25116853caa1976c","modified":1629910593958},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"1b371d908c6729f15877601792583e25cc4e6091","modified":1629910593965},{"_id":"themes/next/source/lib/three/gulpfile.js","hash":"8667c49d81292b55e4ec8c0ec9f8eb42f4ababab","modified":1629910593972},{"_id":"themes/next/source/lib/three/package.json","hash":"ff493a283c04f87a272abdffa8aa29fb4368b803","modified":1629910593991},{"_id":"themes/next/source/lib/three/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1629910593997},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"62fe85b767c525a07bbec1193c0840ee924dad9a","modified":1629910594017},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1629909035127},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1629909035128},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1629909035117},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1629909035118},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1629909035044},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1629909035044},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1629909035045},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1629909035055},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1629909035063},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1629909035063},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1629909035069},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1629909035070},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1629909035070},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1629909035074},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1629909035074},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1629909035075},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1629909035076},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1629909035082},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1629909035084},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1629909035084},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1629909035085},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1629909035086},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1629909035086},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1629909035087},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1629909035088},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1629909035089},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1629909035089},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1629909035090},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1629909035091},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1629909035091},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1629909035093},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1629909035093},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1629909035094},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1629909035094},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1629909035095},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1629909035096},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1629909035122},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1629909035124},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1629909916022},{"_id":"themes/next/source/lib/pace/.git/config","hash":"fadcc75e42b86ee74d05ce56b08984ec6b034e5e","modified":1629909916037},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1629909912529},{"_id":"themes/next/source/lib/pace/.git/index","hash":"bbda2023a3922ad73cf9d6d47293de12777e8f6c","modified":1629909916175},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"7728d474cdaa7943851d42c42eaa718b8afbab97","modified":1629909916004},{"_id":"themes/next/source/lib/pace/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1629909916070},{"_id":"themes/next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1629910593897},{"_id":"themes/next/source/lib/three/.git/config","hash":"c9c13087a3f33e6f46cd35a93c8b9bdf27618852","modified":1629910593910},{"_id":"themes/next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1629910588583},{"_id":"themes/next/source/lib/three/.git/index","hash":"a05a16f21832356acc4c2a4738bbc9c1dc4da4a0","modified":1629910594040},{"_id":"themes/next/source/lib/three/.git/packed-refs","hash":"51439496ae6791f8b002584e71f5d10f4f1a1f71","modified":1629910593879},{"_id":"themes/next/source/lib/three/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1629910593938},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","hash":"71141daa39bbcedcf14ae95c05023a57828a5a43","modified":1629910593979},{"_id":"themes/next/source/lib/three/lib/Projector.js","hash":"69725cd0af6868c5aa059343cc6e18e0c10b2f2e","modified":1629910593985},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","hash":"10795d7f1e5393b2b5e1529b017ee4e0ffe82ac9","modified":1629910593997},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","hash":"8381c792b161001a1b5cf39613c6d48e2588b3ce","modified":1629910594004},{"_id":"themes/next/source/lib/three/src/three-waves.js","hash":"ac382962d408f16acf07b925b94bb15495b5207c","modified":1629910594005},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1629909035045},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1629909035045},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1629909035045},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1629909035046},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1629909035046},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1629909035048},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1629909035049},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1629909035048},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1629909035049},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1629909035050},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1629909035051},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1629909035051},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1629909035052},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1629909035052},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1629909035052},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1629909035053},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1629909035054},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"7e09efc4d76d9f0e71b172377d8769523c0b8ebb","modified":1629909858093},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1629909035056},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1629909035057},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1629909035057},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1629909035057},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1629909035057},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1629909035059},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1629909035060},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1629909035059},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1629909035060},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1629909035061},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1629909035061},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1629909035062},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1629909035062},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1629909035064},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1629909035065},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1629909035065},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1629909035065},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1629909035066},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1629909035067},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1629909035067},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1629909035068},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1629909035068},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1629909035068},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1629909035072},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1629909035072},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1629909035072},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1629909035073},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1629909035077},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1629909035077},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1629909035078},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1629909035079},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1629909035080},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1629909035079},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1629909035081},{"_id":"themes/next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1629909912529},{"_id":"themes/next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1629909912529},{"_id":"themes/next/source/lib/pace/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1629909912530},{"_id":"themes/next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1629909912531},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1629909912531},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1629909912532},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1629909912533},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1629909912534},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1629909912534},{"_id":"themes/next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1629909912535},{"_id":"themes/next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1629909912536},{"_id":"themes/next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1629909912537},{"_id":"themes/next/source/lib/pace/.git/logs/HEAD","hash":"13c68dfc81737e13ac0271544598c1bcdf78b6ed","modified":1629909916026},{"_id":"themes/next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1629910588584},{"_id":"themes/next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1629910588585},{"_id":"themes/next/source/lib/three/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1629910588585},{"_id":"themes/next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1629910588586},{"_id":"themes/next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1629910588586},{"_id":"themes/next/source/lib/three/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1629910588588},{"_id":"themes/next/source/lib/three/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1629910588589},{"_id":"themes/next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1629910588589},{"_id":"themes/next/source/lib/three/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1629910588590},{"_id":"themes/next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1629910588590},{"_id":"themes/next/source/lib/three/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1629910588591},{"_id":"themes/next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1629910588592},{"_id":"themes/next/source/lib/three/.git/logs/HEAD","hash":"4460ce69cfaa458c807c227ecef2fcdb26dda94f","modified":1629910593901},{"_id":"themes/next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1629909915701},{"_id":"themes/next/source/lib/pace/.git/objects/08/38a9623fabb4014d7ed7c0fa4ff8a5bc5e697e","hash":"aeee9d11c3a4c1dec1ad8414dca14e5aa9ca2b7d","modified":1629909914060},{"_id":"themes/next/source/lib/pace/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1629909915299},{"_id":"themes/next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1629909915233},{"_id":"themes/next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1629909915187},{"_id":"themes/next/source/lib/pace/.git/objects/27/8da13dccb38df6bb34360d4919ee2ba81ea6c7","hash":"c5618315849061059ddd6cbea8e11252c561cf48","modified":1629909914351},{"_id":"themes/next/source/lib/pace/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1629909915259},{"_id":"themes/next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1629909915044},{"_id":"themes/next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1629909914530},{"_id":"themes/next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1629909915861},{"_id":"themes/next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1629909914873},{"_id":"themes/next/source/lib/pace/.git/objects/49/234ebf40b265bb9664d22bc391237ff856a3df","hash":"b527eb3cde1e78771ff68c5f633a3cf91816e274","modified":1629909915413},{"_id":"themes/next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1629909914924},{"_id":"themes/next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1629909914989},{"_id":"themes/next/source/lib/pace/.git/objects/5f/2920b23993e6476c3edc77f76eba566e74dd7e","hash":"122d8ac05247282340317587435273e6f3c5a188","modified":1629909915155},{"_id":"themes/next/source/lib/pace/.git/objects/60/8cf35556105f51783ede3fa1e6c2102e8945de","hash":"2c71f7a2ff047119ee898a8edec216238710b89b","modified":1629909915767},{"_id":"themes/next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1629909914204},{"_id":"themes/next/source/lib/pace/.git/objects/61/fcbe3a99ad371eacdf3a3703883f8e95e072c8","hash":"480b60d684f9a077ade5dda0acfc75bcd9597aff","modified":1629909915530},{"_id":"themes/next/source/lib/pace/.git/objects/68/54b8cf544e974998061fb08ea2bd96b561ed68","hash":"1aa0706b6495a5ebd70c3822ac3533df41940fb7","modified":1629909915105},{"_id":"themes/next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1629909914254},{"_id":"themes/next/source/lib/pace/.git/objects/7e/7e5cf8a2a18caf4e0262d1656dea658374d5ae","hash":"47eb39060193e0032e3223b4dfc1a6a55f6612fd","modified":1629909913972},{"_id":"themes/next/source/lib/pace/.git/objects/6a/fa2f52022b00caac3817898d4338ce4d99aa45","hash":"1a6e249ff197293bc3733ddb7eb99d82a21b9342","modified":1629909913914},{"_id":"themes/next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1629909914607},{"_id":"themes/next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1629909914149},{"_id":"themes/next/source/lib/pace/.git/objects/86/ab4cb05d5132451e71dc4ecf6ef663f7404126","hash":"53f157552aa57d405ce6ab58c424bb948c2820d8","modified":1629909915587},{"_id":"themes/next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1629909914713},{"_id":"themes/next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1629909914762},{"_id":"themes/next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1629909914381},{"_id":"themes/next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1629909914799},{"_id":"themes/next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1629909915348},{"_id":"themes/next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1629909914673},{"_id":"themes/next/source/lib/pace/.git/objects/d4/7aaf8effab41aa414596c56dff4d35ff8da1f5","hash":"33e758f44ad48eb1540363a06c31bed1ed929c60","modified":1629909915474},{"_id":"themes/next/source/lib/pace/.git/objects/da/79363b808519d44a7eda67d7bc81e1587a06e8","hash":"0dc5dc27991da9a09d705e488bc3f1fe5a4d4728","modified":1629909914100},{"_id":"themes/next/source/lib/pace/.git/objects/db/d45db3a1d6c09fdf30fc1f0bdc2c6fab5a0680","hash":"5c0bc5c141068651fcb47ef549f556d67153eecf","modified":1629909914011},{"_id":"themes/next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1629909915812},{"_id":"themes/next/source/lib/pace/.git/objects/e8/83088ed2cfe69a983e9e277a6b54b7de226344","hash":"2386487a5933380ac3305ea6b5744d75bdd07292","modified":1629909915646},{"_id":"themes/next/source/lib/pace/.git/objects/ec/6708dc18a5dd312a6735d4d09eddbdb76e75c2","hash":"66e03a78b2f1d36feb9f9347dd5e68e344c3ee68","modified":1629909914304},{"_id":"themes/next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1629909914453},{"_id":"themes/next/source/lib/pace/.git/refs/heads/master","hash":"22684435265b2bb504024b34b80ffbd6786a2411","modified":1629909916026},{"_id":"themes/next/source/lib/three/.git/objects/03/c40a4b50e21c63a0e27b1fbcd014168ae3f6da","hash":"987ca2a1169e875a5ac73e8a1a906b9ae88d4d22","modified":1629910591417},{"_id":"themes/next/source/lib/three/.git/objects/03/eb19e6b3194a820c462bc63177b6fc2bda245f","hash":"0be88820832fa6ea30d56905e98b27798805dc92","modified":1629910591869},{"_id":"themes/next/source/lib/three/.git/objects/09/3d290f60c3b467d503633531d7ce7cdd42dd75","hash":"ab09bc8bfc9079e408dc6facc1bfd9aa5d6bdef9","modified":1629910593477},{"_id":"themes/next/source/lib/three/.git/objects/0b/de10292fcd5dd4b66d1bf60f62ea7d7a30b310","hash":"37710386189fe435ea20541a69c1a9b833b5f50b","modified":1629910592195},{"_id":"themes/next/source/lib/three/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1629910591023},{"_id":"themes/next/source/lib/three/.git/objects/0e/f76c758387d59ca0221cd50564e9edf7080c99","hash":"874d6d28ce21ce2873016183dd9e22b91f71c750","modified":1629910591501},{"_id":"themes/next/source/lib/three/.git/objects/15/e42465bbd9589d2112d7fe3328bd7f85c6b24f","hash":"c28f5e24b9b15ecfddd666711c6d6ef57317cb29","modified":1629910590345},{"_id":"themes/next/source/lib/three/.git/objects/19/65ef0ba0e2c1ad938cffdcbebed63048751ac6","hash":"75921c60b65a5606a85ab5cec185f430d844048d","modified":1629910592357},{"_id":"themes/next/source/lib/three/.git/objects/1a/f9d30697fd2194a4132a3a6647722be2eb75dc","hash":"0f686b4e26b1e751509ded8a2db697b1d7938004","modified":1629910590444},{"_id":"themes/next/source/lib/three/.git/objects/1b/3d1cd16f3e6ce99ea92c7e9c0b78ee30a8c346","hash":"16569e1c4912fd762f32b13de839d05b9c319e54","modified":1629910590775},{"_id":"themes/next/source/lib/three/.git/objects/1f/0b95a965630f47a7264fe9e9456ed7da36c2aa","hash":"6e98b6d7740bf53074339ce383089320fe1962b9","modified":1629910592913},{"_id":"themes/next/source/lib/three/.git/objects/1f/354734edae8d1fa1af07d20573698512589c4e","hash":"9f1bb3baf74e25329b553704be0a3c64e194df8c","modified":1629910589978},{"_id":"themes/next/source/lib/three/.git/objects/21/77c1416c8e91ed918b6d3cf7f333d99d659a24","hash":"7330016805a652c2153bfcfbdd4c3c50e5b5a642","modified":1629910593620},{"_id":"themes/next/source/lib/three/.git/objects/21/cbdd0d76bb18019bcb47aeec029fb13e211b09","hash":"c4466a47cecee06641b74dca59ed92665c24a5d7","modified":1629910592536},{"_id":"themes/next/source/lib/three/.git/objects/29/4f11136ee13277ee96ec3bb56d810f43655298","hash":"a294c3770aa5e7ed386075202f5b88048e1d170d","modified":1629910593341},{"_id":"themes/next/source/lib/three/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1629910591074},{"_id":"themes/next/source/lib/three/.git/objects/34/cbb2a80da03e4d233dcfa3f11fed64894b2de5","hash":"ddf0c1fdb72ed14c50b1d1718a122f5f2a38a3ed","modified":1629910591980},{"_id":"themes/next/source/lib/three/.git/objects/36/3db3ce197d25b8c64db663aa9000a181511461","hash":"f87bc2ce87e37d0ee60eceef8be89dae4c52e01d","modified":1629910591781},{"_id":"themes/next/source/lib/three/.git/objects/3a/4c8581b3aa0d4f9192de158bd4223a90d646b5","hash":"a64efe9f8e2db0ff3cfb7b5e71fedf229ce290fd","modified":1629910591134},{"_id":"themes/next/source/lib/three/.git/objects/3a/ae52073909b7ccdbd43538ee6c814691935c57","hash":"652619b1d76f267c1646b6167de80f58a520525e","modified":1629910592322},{"_id":"themes/next/source/lib/three/.git/objects/3a/cef7449b991ee78bb5b7f2f121996b9ec9bba4","hash":"d9165d5939be17750b9edad5d0fc32029e4a23d6","modified":1629910592238},{"_id":"themes/next/source/lib/three/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1629910593169},{"_id":"themes/next/source/lib/three/.git/objects/3e/4151e56ef50d7ff46a1ce73156c35ac6f1224d","hash":"a47d2e1895903aa7e1b51d35731f212ffc6a1718","modified":1629910590239},{"_id":"themes/next/source/lib/three/.git/objects/3f/f2616b188ab71e1abf2029d7d55834c5643fc5","hash":"65bbc360ee3cc66fba71b9fb0baa3cff744327b9","modified":1629910592771},{"_id":"themes/next/source/lib/three/.git/objects/42/d67e32b0d5f676f7462ad5b013f4eb8cad2486","hash":"fb1c4d377401f2145cc721d96fdf40d89ac23434","modified":1629910591725},{"_id":"themes/next/source/lib/three/.git/objects/4f/f48fd861ac49dd98ce52052bf6214f0a91facf","hash":"ae4d7b9a38e8913c055d37a6f129378d089bfd65","modified":1629910591361},{"_id":"themes/next/source/lib/three/.git/objects/52/71f18c203d24b27ec7bd977c2d5c61300cea1a","hash":"cdae53ba376df246585a2f44a86d0c7da98bca1f","modified":1629910593090},{"_id":"themes/next/source/lib/three/.git/objects/53/c865f8ff0aaa7ae2c8da7324dce73756ffe7c0","hash":"2d1c2dcfa342f46910a5698023b2c208bf3336e0","modified":1629910591461},{"_id":"themes/next/source/lib/three/.git/objects/64/d845d3aed3dce9eab9de39793f1c4d1d6e0deb","hash":"1c7346386e8c3d8830bf36bff7011976ba326b3e","modified":1629910591533},{"_id":"themes/next/source/lib/three/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1629910593037},{"_id":"themes/next/source/lib/three/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1629910591184},{"_id":"themes/next/source/lib/three/.git/objects/6b/128053933889f264c239abe0d381523daa8fa5","hash":"23df1e6daed83528bc2f36980678ecc31e17f09e","modified":1629910591830},{"_id":"themes/next/source/lib/three/.git/objects/6e/a4473e91dc2dbc452ff446e7cb04cb2ff16da0","hash":"710066cce498e372a932ff272d3d0eb4345fe3cf","modified":1629910590505},{"_id":"themes/next/source/lib/three/.git/objects/6f/f9f6347d48d4bc18b07a813f9140d7287df7aa","hash":"46232e003a90f98c78af21c4898ab37c66fda385","modified":1629910592477},{"_id":"themes/next/source/lib/three/.git/objects/70/0960a662785b70b5c72909810794e1c18e9891","hash":"ea3c3330dd0a213a3cebdc42ee57d43fb8f9813c","modified":1629910592952},{"_id":"themes/next/source/lib/three/.git/objects/79/ae5f64ea4be7e1a108b2f1fc8afbca7bfa1fba","hash":"4e28517d80599b1a6051b1d3f657654aca6333b9","modified":1629910591245},{"_id":"themes/next/source/lib/three/.git/objects/7b/a927a3390f9a6345039cdb5bc54c6a54297f69","hash":"0d10f821d9e61a27c3f9d9e03e923265693d68ab","modified":1629910592454},{"_id":"themes/next/source/lib/three/.git/objects/7d/2bcbb026e4a38ab45317d8b78bfed70ba25c51","hash":"05394b260c2c58ee38b7224bb4ecb52df1e7f354","modified":1629910592711},{"_id":"themes/next/source/lib/three/.git/objects/7d/d7c1e8f79dc9a9a99e290147528d7a47d46830","hash":"c2104c89bcf686b243061b456ddc86d916b84360","modified":1629910592282},{"_id":"themes/next/source/lib/three/.git/objects/7f/6a7ddb8a04644dc980d83c9878b4621acf82f5","hash":"c517caf5d47c9f1eba2ced6800dab03e2e29a130","modified":1629910590825},{"_id":"themes/next/source/lib/three/.git/objects/80/5e5d92b903742c45e359b26a06cf86376301d8","hash":"6d39f5d10ed1e3acaaef5ac5999945b65ab12b88","modified":1629910592864},{"_id":"themes/next/source/lib/three/.git/objects/81/d7d11db23df8681d1a8242fb27252a9d2d7062","hash":"a294b374bb129cc8aaec9c01bf1df1c5addafe9d","modified":1629910590190},{"_id":"themes/next/source/lib/three/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1629910593002},{"_id":"themes/next/source/lib/three/.git/objects/89/b7ae569312ae577534d7b58647232fb48bfb08","hash":"a265c0a7e24267bd82d11a48f091d2241edc0080","modified":1629910593432},{"_id":"themes/next/source/lib/three/.git/objects/87/782e1008d1f88a9cb63d59407b1cb9e47b0861","hash":"0af5c5e17b27d8114fddd53d7cae8bb3284ae9af","modified":1629910590665},{"_id":"themes/next/source/lib/three/.git/objects/8a/2159d7a0c70d394071e8dcc79502d5cd1fc5e4","hash":"58ff19b7a9a65c9e562b9e1c7ee0ed3ac005b15d","modified":1629910593264},{"_id":"themes/next/source/lib/three/.git/objects/8e/3ea1a067348d2a9c066fbf201663b462a3ed6c","hash":"f3168176590ac08570ef75b73ecae2b4a455d753","modified":1629910591665},{"_id":"themes/next/source/lib/three/.git/objects/8e/985e4c70f87248ecc33d93410d80d1632c552f","hash":"a1d2084dd43e026f1b93027221629f5cbb135c88","modified":1629910590913},{"_id":"themes/next/source/lib/three/.git/objects/90/e94cbdbfd33fea8606d447d01011ff657478f1","hash":"df922aee3bc7eb3266134797efb6f888743c6a12","modified":1629910591583},{"_id":"themes/next/source/lib/three/.git/objects/94/1060002b98395a31cb47a33166f5568a20d4b5","hash":"c345981cd6097743cbb6f44d61b33ed37b110b31","modified":1629910590141},{"_id":"themes/next/source/lib/three/.git/objects/9d/b082c6081a7d8b8b752bc35ebcba85073f5fac","hash":"c240b76ccdb8552d6d4c75e55d5c4c93807756af","modified":1629910590101},{"_id":"themes/next/source/lib/three/.git/objects/a4/6866ca175f7c27daaf6b39c94d930bc27d4ce5","hash":"fc416f7f3f62c338bda28bb56bfa6f8fb49421ff","modified":1629910592839},{"_id":"themes/next/source/lib/three/.git/objects/a9/27aca23c7f27f5d1ebf2c4baea3aa5d8676143","hash":"dc3e5c853a502fbe7ea3e35c2f7a2bf94318ade4","modified":1629910590395},{"_id":"themes/next/source/lib/three/.git/objects/ae/8fa980e909988af2ebd9423658213d2e7e6bba","hash":"9978e4f223de97e23a047986bf21cbf48663a150","modified":1629910590554},{"_id":"themes/next/source/lib/three/.git/objects/b0/2d36d33210bc68d3e6451c663eb567ebc5721c","hash":"8d3bac2fa021a8f4609a134167edb84fd46254b2","modified":1629910591609},{"_id":"themes/next/source/lib/three/.git/objects/bc/e19792442b36a0560e50adf61e86ef7ecbb50a","hash":"10f1b5f7fc7fd8b01ea9c5a5d1efad0464dd03ca","modified":1629910590962},{"_id":"themes/next/source/lib/three/.git/objects/c3/e49d5369de034ff0788d11519bd9150b67ce74","hash":"256a3f0a7054a3e2cde1fc58f027565c87ad3d1b","modified":1629910591300},{"_id":"themes/next/source/lib/three/.git/objects/ce/175226253f7f31da632b93ab6560debab1bf6d","hash":"55c41b0948cb31fad3a52ab7ac91ba93e6c22751","modified":1629910590725},{"_id":"themes/next/source/lib/three/.git/objects/d0/32ce3fe05be57b72cc925f86149497229cda13","hash":"59e5036e95b496852ad3b918eac2e4b28a5951f2","modified":1629910593521},{"_id":"themes/next/source/lib/three/.git/objects/d2/a00ca1067b93b81dae8ea7d0c9838e935595e8","hash":"4b1ecd5271cdf94c10c2e413c7378adb22e940bb","modified":1629910593296},{"_id":"themes/next/source/lib/three/.git/objects/d8/8d5765694f92039daac0f944405d4cf61a0d13","hash":"70d2b236fcd955aa4fa95efc2e18c98919003ec6","modified":1629910592576},{"_id":"themes/next/source/lib/three/.git/objects/d9/0026fb76d55bba50ee4a221c887a0f1a8e8102","hash":"ac0ac5756be4b24f2249be101665ff29ed93d1f9","modified":1629910593214},{"_id":"themes/next/source/lib/three/.git/objects/d9/90e2654ec49768cd50d630db99ee00bee2b13c","hash":"6c5cc041391cb5a6b3e0f2f15f30bd62735ac7fa","modified":1629910592145},{"_id":"themes/next/source/lib/three/.git/objects/db/fc5bb53f0ee561f55b18c9796e1e03a9781153","hash":"3cda0d28ce918db5b722db817e69ea522a4db9ce","modified":1629910590279},{"_id":"themes/next/source/lib/three/.git/objects/df/932438893faefc6b9f5ba9191913dfeedc2a1c","hash":"ac939ae39ab04abc99c0caaef00849585ff4886d","modified":1629910593372},{"_id":"themes/next/source/lib/three/.git/objects/e0/52c7542703df4969a95779bd4dc58b568bcb5e","hash":"b1ccf1650011f74939f07233834bdff21baf4952","modified":1629910590864},{"_id":"themes/next/source/lib/three/.git/objects/e0/ced7e71c43a729f9653b1c4434b95724fc02ed","hash":"98c61b57d8e5e03cf30d402cfcb840c6e610aaa6","modified":1629910593128},{"_id":"themes/next/source/lib/three/.git/objects/e5/6e96bd99ebe3f0dc8f02c979703c3666f6dd9e","hash":"b971fcaae8424ea1b507379afdcdff74359a1525","modified":1629910593571},{"_id":"themes/next/source/lib/three/.git/objects/ea/7a1bbd08eb930b5f777ec025493ae0c8cb12d4","hash":"3c428fd65f982afbabbf683163bcc88a4eb4cda0","modified":1629910590615},{"_id":"themes/next/source/lib/three/.git/objects/ec/00e107b97a0b7a9850219894bf4e533c68bf87","hash":"5b7f94788c3c19c8a0f73f1b712d5d79e0236668","modified":1629910591908},{"_id":"themes/next/source/lib/three/.git/objects/ef/45fc381ccdb38fd03bb02c4e761d08275049c2","hash":"2eb89702aa19a302e38aff842b6ad1e22c3fbb93","modified":1629910592030},{"_id":"themes/next/source/lib/three/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1629910592073},{"_id":"themes/next/source/lib/three/.git/objects/fa/be1d6949c228188d07df0f4b99b217c7b7f92e","hash":"de53b76740aff0953bcd79853d8addfabfc29f95","modified":1629910592643},{"_id":"themes/next/source/lib/three/.git/objects/fe/47fa8f2d9edef52a8ea859537c9286363ee168","hash":"dfaa57c592a229b220a7241bbd0567ec38f4e578","modified":1629910592798},{"_id":"themes/next/source/lib/three/.git/refs/heads/master","hash":"dcb9d54aa64c8a682ca5ca209370022b8a8dc843","modified":1629910593900},{"_id":"themes/next/source/lib/pace/.git/logs/refs/heads/master","hash":"13c68dfc81737e13ac0271544598c1bcdf78b6ed","modified":1629909916028},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1629909916021},{"_id":"themes/next/source/lib/three/.git/logs/refs/heads/master","hash":"4460ce69cfaa458c807c227ecef2fcdb26dda94f","modified":1629910593902},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1629910593895},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"13c68dfc81737e13ac0271544598c1bcdf78b6ed","modified":1629909916020},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"4460ce69cfaa458c807c227ecef2fcdb26dda94f","modified":1629910593895},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1629909035124},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1629909035126},{"_id":"themes/next/source/lib/three/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1629910592407},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1629910594039},{"_id":"public/about/index.html","hash":"7e250a9d143ea214c1716fa7c208c612f4ba1a6f","modified":1629912313227},{"_id":"public/resources/index.html","hash":"479e0b38f07aa2e707fdf48192564f7d5f9aca7d","modified":1629912313227},{"_id":"public/categories/index.html","hash":"b2f171816d1ba7e741f16ba875c7ed6c352076bb","modified":1629912313227},{"_id":"public/sitemap/index.html","hash":"5268cf9a77c6ad77844c9a48834bb005fc4c4587","modified":1629912313227},{"_id":"public/schedule/index.html","hash":"32cdc5ee505644b8071ec98523290919e421109d","modified":1629912313227},{"_id":"public/tags/index.html","hash":"54d696de5030c211204397b80bae5a7a753043b7","modified":1629912313227},{"_id":"public/archives/index.html","hash":"9fc07ed651baaec56057274feaf673a85c183c6b","modified":1629912313227},{"_id":"public/archives/2021/index.html","hash":"858e87efebba1c8531823825fef99c0fb279a1c5","modified":1629912313227},{"_id":"public/archives/2021/08/index.html","hash":"b969dfd937c97cd576587b409ad738a1a43049f9","modified":1629912313227},{"_id":"public/2021/08/25/hello-world/index.html","hash":"0d653e3fe3145c75f10b2e2fad4bfc6fd4acf3b1","modified":1629912313227},{"_id":"public/index.html","hash":"5a6003103cc724bd45557d82ba8552119559d15c","modified":1629912313227},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1629912313227},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1629912313227},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1629912313227},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1629912313227},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1629912313227},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1629912313227},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1629912313227},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1629912313227},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1629912313227},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1629912313227},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1629912313227},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1629912313227},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1629912313227},{"_id":"public/lib/pace/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1629912313227},{"_id":"public/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1629912313227},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1629912313227},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1629912313227},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1629912313227},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1629912313227},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1629912313227},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1629912313227},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1629912313227},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1629912313227},{"_id":"public/lib/pace/README.html","hash":"b1db0e6c71c25fbdc5a161e1bd70382846ce99ab","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1629912313227},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1629912313227},{"_id":"public/lib/three/README.html","hash":"d8faebc08f93684752eeb936400e62117bd59b6e","modified":1629912313227},{"_id":"public/lib/three/package.json","hash":"3e6a0c56ec47a38c0bf7b404f6e46965ec7d2e3d","modified":1629912313227},{"_id":"public/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1629912313227},{"_id":"public/lib/three/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1629912313227},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1629912313227},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1629912313227},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1629912313227},{"_id":"public/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1629912313227},{"_id":"public/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1629912313227},{"_id":"public/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1629912313227},{"_id":"public/css/main.css","hash":"af513fda3ab1eaf6da11a87bbab3ea867a49f881","modified":1629912313227},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1629912313227},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1629912313227},{"_id":"public/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1629912313227},{"_id":"public/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1629912313227},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1629912313227},{"_id":"public/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1629912313227},{"_id":"public/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1629912313227},{"_id":"public/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1629912313227},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1629912313227},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1629912313227},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1629912313227}],"Category":[],"Data":[],"Page":[{"title":"关于","date":"2020-02-10T14:07:08.000Z","type":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2020-02-10 22:07:08\ntype: \"about\"\ncomments: false\n---\n","updated":"2021-08-25T16:52:18.110Z","path":"about/index.html","layout":"page","_id":"cksrrpif90000yguqdaoqebr2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"资源","date":"2020-02-10T14:07:08.000Z","type":"resources","comments":0,"_content":"","source":"resources/index.md","raw":"---\ntitle: 资源\ndate: 2020-02-10 22:07:08\ntype: \"resources\"\ncomments: false\n---\n","updated":"2021-08-25T16:52:24.631Z","path":"resources/index.html","layout":"page","_id":"cksrrpiff0001yguq584eadax","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2020-02-10T14:07:08.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-02-10 22:07:08\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-08-25T16:52:01.240Z","path":"categories/index.html","layout":"page","_id":"cksrrpifg0002yguq8lle8ndq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"站点地图","date":"2020-02-10T14:07:08.000Z","type":"sitemap","comments":0,"_content":"","source":"sitemap/index.md","raw":"---\ntitle: 站点地图\ndate: 2020-02-10 22:07:08\ntype: \"sitemap\"\ncomments: false\n---\n","updated":"2021-08-25T16:54:23.622Z","path":"sitemap/index.html","layout":"page","_id":"cksrrpifh0003yguq3q4jcr6k","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2021-08-25T16:53:29.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2021-08-26 00:53:29\n---\n","updated":"2021-08-25T16:53:29.149Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cksrrpifi0004yguq104obqix","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2020-02-10T14:07:08.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-02-10 22:07:08\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-08-25T16:52:11.116Z","path":"tags/index.html","layout":"page","_id":"cksrrpifj0005yguq6p3w065c","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ConcurrentHashMap","_content":"### 线程安全\n\n利用CAS自旋锁+Synchronized保证并发更新安全\n\n底层使用数组+链表+红黑树实现\n\nkey和value不能为null\n\n### 创建ConcurrentHashMap\n\n- 和HashMap不同, 创建对象时指定初始容量会进行计算，计算方式是  n + n / 2 + 1\n- 实际设置的初始容量会比传入的大，同时是2的幂的一个值.\n\n### 关键参数sizeCtl\n\n1. sizeCtl为0, 表示数组未初始化, 且初始容量为16\n2. sizeCtl为正数, 如果数组未初始化，则记录的是数组初始容量，如果已经初始化，则记录数组扩容阈值（初始容量*0.75）\n3. sizeCtl为-1， 表示数组正在初始化\n4. sizeCtl小于0且不是-1，表示数组正在扩容,-(1-n)表示n个线程正在对数组扩容\n\n### 结构\n\n和HashMap一样， 用数组保存数据， Hash碰撞的保存成链表或者红黑树，转换条件是链表长度8同时数组长度大于等于64\n\n### 注意\n\n1. 初始化容量计算\n\n    初始容量采用公式 n + n / 2 + 1, 例如创建时指定32, 则根据公式  32 + 32 / 2 + 1 = 49.  然后会取49之后的2的幂数是64\n\n2. 多线程协助扩容\n\n    在扩容过程中会根据CPU按段对数组进行迁移处理, 对处理过的元素进行标记, 当有另一个线程添加元素发现是标记元素时, 则协助扩容, 也领取一段元素进行扩容处理\n\n    处理完成后再次循环领取任务处理, 处理是从数组末尾向前处理的, 最小的段大小是16个元素\n\n3. 元素数量计数\n\n    元素计数采用CAS赋值和赋值失败对数组元素赋值的方式进行, CAS对baseCount累加失败, 则循环对数组中的元素进行累加操作, 数组累加操作成功一次就跳出, 失败则重新计算索引再次尝试累加\n\n    总元素个数是baseCount+数组元素累加的值\n\n4. 大量的使用CAS自旋操作, 以避免使用锁\n\n### 获取索引\n\n获取索引和HashMap不同，不是直接tab[i]\n\n使用Unsafe.getObjectVolatie()获取索引元素， 虽然table是用volatile修饰的，但是无法保证线程每次都能拿到table最新元素，用这个方法可以直接获取内存的数据，保证每次拿到数据都是最新的\n\n### 初始化Table\n\n在添加元素时， 如果Table为空则进行初始化\n\n- 初始化过程中， 会判断sizeCtl, 如果小于0则表示已经有线程在初始化, 当前线程让出CPU\n- sizeCtl在初始化前保存的时候初始化容量, 初始化完成后保存扩容阈值\n- sc = n - (n >>> 2);计算扩容阈值, n>>>2就是n除以4, n - n / 4就是n乘以4分之一n. 即sc = 0.75*n. 用右移计算避免除法的性能损耗\n\n```java\nprivate final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    while ((tab = table) == null || tab.length == 0) {\n\t\t\t\t// 小于0表示其他线程正在初始化Table, 当前线程调用yield方法让出CPU时间片\n        if ((sc = sizeCtl) < 0)\n            Thread.yield(); // lost initialization race; just spin\n\t\t\t\t// 以原子性操作对sizeCtl赋值成-1, 表示正在扩容\n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n\t\t\t\t\t\t\t\t\t\t// 初始化容量\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\t\t\t\t\t// 创建数组\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    // 计算扩容阈值\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n\t\t\t\t\t\t\t\t// 初始化完成, sizeCtl保存扩容阈值\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n### 添加元素\n\n- 添加元素时判断Table是否为空, 如果为空则执行上述的初始化方法\n- 初始化完成后, 添加操作会有3种情况发生\n    1. 要添加的key对应的Table数组索引位置为空, 则以CAS形式将添加的元素放到对应的索引位置上, 此处可能出现多个线程同时进入数组为空的结点, 所以要CAS赋值, 一个线程赋值成功, 第二个线程赋值就会失败走下一次循环, 进入下边的逻辑\n\n        ```java\n        // 计算要添加的key对于数组的索引下标\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n        \t\t// 以原子性操作对这个索引赋值, 将要添加的结点放到索引位置上\n            if (casTabAt(tab, i, null, new Node<K,V>(hash, key, value, null)))\n        \t\t    break;                   // no lock when adding to empty bin\n        }\n        ```\n\n    2. Table数组正在扩容, 则触发协助扩容逻辑\n    3. 其他情况, 出现了hash碰撞, 即通过key的hash获取到了元素, 则要判断这个key是否在这个元素对应的桶内\n        - 对数组的这个元素进行加锁, 确保只有一个线程能操作这个元素对于的桶（链表或红黑树）\n        - 再次获取元素判断\n        - 通过hash值来判断这个元素结点是链表还是红黑树\n            - 链表, 则循环链表, 如果hash和key都相同, 则表示是覆盖已有key的操作, 否则遍历到链表尾, 将新元素结点添加到链表尾部\n            - 红黑树, 将新元素结点添加到树里\n\n            ```java\n            // 加锁, f是数组Table的元素, 对其加锁保证多个线程只能一个线程操作当前元素对应的桶\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n            \t\t\t\t// 链表的hash值是正数或0\n                    if (fh >= 0) {\n                        binCount = 1;\n            \t\t\t\t\t\t// 循环链表\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n            \t\t\t\t\t\t\t\t// 当key相同时, 表示key已经存在了, 进行值覆盖操作\n                            if (e.hash == hash && ((ek = e.key) == key || (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n            \t\t\t\t\t\t\t\t// 把新的元素结点添加到链表尾部\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key, value, null);\n                                break;\n                            }\n                        }\n                    }\n            \t\t\t\t// 元素结点是红黑树\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key, value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            ```\n\n### 链表转红黑树\n\n- 当添加元素完成后, 判断当前链表长度是否大于8, 如果是8则调用转换红黑树方法\n\n    ```java\n    if (binCount != 0) {\n    \t\t// 链表长度大于等于8则进入转换方法\n        if (binCount >= TREEIFY_THRESHOLD)\n            treeifyBin(tab, i);\n        if (oldVal != null)\n            return oldVal;\n        break;\n    }\n    ```\n\n- 进入转换方法, 再次判断Table元素结点是否小于64个, 如果小于则只进行扩容, 大于等于64个则转成红黑树\n\n    ```java\n    private final void treeifyBin(Node<K,V>[] tab, int index) {\n    \t\tNode<K,V> b; int n, sc;\n    \t\tif (tab != null) {\n    \t\t\t\t// 先判断数组Table的元素个数是否小于64个, 小于的话调用扩容方法\n    \t\t    if ((n = tab.length) < MIN_TREEIFY_CAPACITY)\n    \t\t        tryPresize(n << 1);\n    \t\t\t\t// 大于等于64个元素进行转成红黑树操作\n    \t\t    else if ((b = tabAt(tab, index)) != null && b.hash >= 0) {\n    \t\t        synchronized (b) {\n    \t\t            if (tabAt(tab, index) == b) {\n    \t\t                TreeNode<K,V> hd = null, tl = null;\n    \t\t                for (Node<K,V> e = b; e != null; e = e.next) {\n    \t\t                    TreeNode<K,V> p =\n    \t\t                        new TreeNode<K,V>(e.hash, e.key, e.val, null, null);\n    \t\t                    if ((p.prev = tl) == null)\n    \t\t                        hd = p;\n    \t\t                    else\n    \t\t                        tl.next = p;\n    \t\t                    tl = p;\n    \t\t                }\n    \t\t                setTabAt(tab, index, new TreeBin<K,V>(hd));\n    \t\t            }\n    \t\t        }\n    \t\t    }\n    \t\t}\n    }\n    ```\n\n### 统计操作\n\n- 添加完成后进行元素个数统计操作\n\n    ```java\n    addCount(1L, binCount);\n    ```\n\n- 进入统计方法\n\n    当添加操作完成后需要对当前元素个数据进行累加操作, 而多线程操作时的累加操作会发生并发问题, 此处采用一个bashCount和一个数组的形式进行计算, 当bashCount累加操作失败时, 则将累加的值在数组中进行累加, 最终的元素个数是bashCount和数组各个元素的总和\n\n    统计元素个数完成后, 计算当前元素的总个数, 再判断是否超出阈值进行扩容处理\n\n    ```java\n    // 添加计数\n    private final void addCount(long x, int check) {\n    \t\t// CounterCell数组就是保存元素个数的数组\n        CounterCell[] as; long b, s;\n        if ((as = counterCells) != null || !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {\n            CounterCell a; long v; int m;\n            boolean uncontended = true;\n            if (as == null || (m = as.length - 1) < 0 || (a = as[ThreadLocalRandom.getProbe() & m]) == null || !(uncontended = U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {\n                // 关键方法, 进行元素个数添加操作\n    \t\t\t\t\t\tfullAddCount(x, uncontended);\n                return;\n            }\n            if (check <= 1)\n                return;\n    \t\t\t\t// 统计数组元素个数\n            s = sumCount();\n        }\n    \t\t// 当发生添加操作时进入此逻辑判断是否要对数组扩容\n        if (check >= 0) {\n            Node<K,V>[] tab, nt; int n, sc;\n    \t\t\t\t// 此时sizeCtl保存的是扩容阈值, s为当前数组元素个数, 此处判断是否需要扩容\n            while (s >= (long)(sc = sizeCtl) && (tab = table) != null && (n = tab.length) < MAXIMUM_CAPACITY) {\n                int rs = resizeStamp(n);\n    \t\t\t\t\t\t// 小于0则表示当前有线程在扩容, 进行协助扩容操作\n                if (sc < 0) {\n                    if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt = nextTable) == null || transferIndex <= 0)\n                        break;\n                    if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))\n                        transfer(tab, nt);\n                }\n    \t\t\t\t\t\t// 大于等于0表示开始扩容, 同时将sizeCtl的值设置成负数\n                else if (U.compareAndSwapInt(this, SIZECTL, sc, (rs << RESIZE_STAMP_SHIFT) + 2))\n    \t\t\t\t\t\t\t\t// 扩容方法\n                    transfer(tab, null);\n                s = sumCount();\n            }\n        }\n    }\n    ```\n\n### 添加计数\n\n```java\nprivate final void fullAddCount(long x, boolean wasUncontended) {\n\t  int h;\n\t\t// 计算统计数组的hash值\n\t  if ((h = ThreadLocalRandom.getProbe()) == 0) {\n\t      ThreadLocalRandom.localInit();      // force initialization\n\t      h = ThreadLocalRandom.getProbe();\n\t      wasUncontended = true;\n\t  }\n\t  boolean collide = false;                // True if last slot nonempty\n\t  for (;;) {\n\t      CounterCell[] as; CounterCell a; int n; long v;\n\t\t\t\t// baseCount添加失败了, 同时数组不为空\n\t      if ((as = counterCells) != null && (n = as.length) > 0) {\n\t\t\t\t\t\t// hash对应数组元素为空, 进行创建元素\n\t          if ((a = as[(n - 1) & h]) == null) {\n\t              if (cellsBusy == 0) {            // Try to attach new Cell\n\t\t\t\t\t\t\t\t\t\t// 调用有参构造器进行创建对象\n\t                  CounterCell r = new CounterCell(x); // Optimistic create\n\t                  if (cellsBusy == 0 && U.compareAndSwapInt(this, CELLSBUSY, 0, 1)) {\n\t                      boolean created = false;\n\t                      try {               // Recheck under lock\n\t                          CounterCell[] rs; int m, j;\n\t                          if ((rs = counterCells) != null && (m = rs.length) > 0 && rs[j = (m - 1) & h] == null) {\n\t                              rs[j] = r;\n\t                              created = true;\n\t                          }\n\t                      } finally {\n\t                          cellsBusy = 0;\n\t                      }\n\t\t\t\t\t\t\t\t\t\t\t\t// 经过一系列判断, 创建成功跳出循环, 否则下次循环\n\t                      if (created)\n\t                          break;\n\t                      continue;           // Slot is now non-empty\n\t                  }\n\t              }\n\t              collide = false;\n\t          }\n\t          else if (!wasUncontended)       // CAS already known to fail\n\t              wasUncontended = true;      // Continue after rehash\n\t          else if (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))\n\t              break;\n\t\t\t\t\t\t// 数组大小超出CPU核数\n\t          else if (counterCells != as || n >= NCPU)\n\t              collide = false;            // At max size or stale\n\t          else if (!collide)\n\t              collide = true;\n\t          else if (cellsBusy == 0 && U.compareAndSwapInt(this, CELLSBUSY, 0, 1)) {\n\t              try {\n\t                  if (counterCells == as) {// Expand table unless stale\n\t                      CounterCell[] rs = new CounterCell[n << 1];\n\t                      for (int i = 0; i < n; ++i)\n\t                          rs[i] = as[i];\n\t                      counterCells = rs;\n\t                  }\n\t              } finally {\n\t                  cellsBusy = 0;\n\t              }\n\t              collide = false;\n\t              continue;                   // Retry with expanded table\n\t          }\n\t          h = ThreadLocalRandom.advanceProbe(h);\n\t      }\n\t\t\t\t// 数组为空, 则进行创建数组操作\n\t      else if (cellsBusy == 0 && counterCells == as && U.compareAndSwapInt(this, CELLSBUSY, 0, 1)) {\n\t          boolean init = false;\n\t          try {                           // Initialize table\n\t              if (counterCells == as) {\n\t                  CounterCell[] rs = new CounterCell[2];\n\t                  rs[h & 1] = new CounterCell(x);\n\t                  counterCells = rs;\n\t                  init = true;\n\t              }\n\t          } finally {\n\t              cellsBusy = 0;\n\t          }\n\t          if (init)\n\t              break;\n\t      }\n\t\t\t\t// 优先尝试对baseCount进行累加操作, 操作成功就跳出循环, 否则进行下次循环进入对数组操作逻辑\n\t      else if (U.compareAndSwapLong(this, BASECOUNT, v = baseCount, v + x))\n\t          break;                          // Fall back on using base\n\t  }\n}\n```\n\n### 扩容方法\n\n- 扩容有两种情况, 当前线程扩容和协助扩容\n\n    扩容的原理, 多线程可能同时进行扩容, 那么将整个数组根据CPU核数计算出平均的段, 每个线程处理一个段, 当处理完一个元素结点后, 在这个位置放置一个ForwardingNode元素结点占位表示正在处理, 即MOVED\n\n    新建一个2倍原数组大小的nextTable数组,用来保存扩容后的新数组\n\n    ```java\n    private final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) {\n        int n = tab.length, stride;\n    \t\t// 根据当前CPU核数计算要处理的段大小, 最小16个元素\n        if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE)\n            stride = MIN_TRANSFER_STRIDE; // subdivide range\n    \t\t// 新数组为null, 则创建2倍大的新数组\n        if (nextTab == null) {            // initiating\n            try {\n                @SuppressWarnings(\"unchecked\")\n                Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n << 1];\n                nextTab = nt;\n            } catch (Throwable ex) {      // try to cope with OOME\n                sizeCtl = Integer.MAX_VALUE;\n                return;\n            }\n            nextTable = nextTab;\n            transferIndex = n;\n        }\n        int nextn = nextTab.length;\n        ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab);\n        boolean advance = true;\n        boolean finishing = false; // to ensure sweep before committing nextTab\n        for (int i = 0, bound = 0;;) {\n            Node<K,V> f; int fh;\n            while (advance) {\n                int nextIndex, nextBound;\n                if (--i >= bound || finishing)\n                    advance = false;\n                else if ((nextIndex = transferIndex) <= 0) {\n                    i = -1;\n                    advance = false;\n                }\n                else if (U.compareAndSwapInt (this, TRANSFERINDEX, nextIndex, nextBound = (nextIndex > stride ? nextIndex - stride : 0))) {\n                    bound = nextBound;\n                    i = nextIndex - 1;\n                    advance = false;\n                }\n            }\n            if (i < 0 || i >= n || i + n >= nextn) {\n                int sc;\n    \t\t\t\t\t\t// 扩容完成, 将新的table赋值给原table\n                if (finishing) {\n                    nextTable = null;\n                    table = nextTab;\n                    sizeCtl = (n << 1) - (n >>> 1);\n                    return;\n                }\n    \t\t\t\t\t\t// 判断是否扩容完成\n                if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) {\n                    if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT)\n                        return;\n                    finishing = advance = true;\n                    i = n; // recheck before commit\n                }\n            }\n            else if ((f = tabAt(tab, i)) == null)\n                advance = casTabAt(tab, i, null, fwd);\n            else if ((fh = f.hash) == MOVED)\n                advance = true; // already processed\n            else {\n                synchronized (f) {\n                    if (tabAt(tab, i) == f) {\n                        Node<K,V> ln, hn;\n                        if (fh >= 0) {\n                            int runBit = fh & n;\n                            Node<K,V> lastRun = f;\n                            for (Node<K,V> p = f.next; p != null; p = p.next) {\n                                int b = p.hash & n;\n                                if (b != runBit) {\n                                    runBit = b;\n                                    lastRun = p;\n                                }\n                            }\n                            if (runBit == 0) {\n                                ln = lastRun;\n                                hn = null;\n                            }\n                            else {\n                                hn = lastRun;\n                                ln = null;\n                            }\n                            for (Node<K,V> p = f; p != lastRun; p = p.next) {\n                                int ph = p.hash; K pk = p.key; V pv = p.val;\n                                if ((ph & n) == 0)\n                                    ln = new Node<K,V>(ph, pk, pv, ln);\n                                else\n                                    hn = new Node<K,V>(ph, pk, pv, hn);\n                            }\n                            setTabAt(nextTab, i, ln);\n                            setTabAt(nextTab, i + n, hn);\n                            setTabAt(tab, i, fwd);\n                            advance = true;\n                        }\n                        else if (f instanceof TreeBin) {\n                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n                            TreeNode<K,V> lo = null, loTail = null;\n                            TreeNode<K,V> hi = null, hiTail = null;\n                            int lc = 0, hc = 0;\n                            for (Node<K,V> e = t.first; e != null; e = e.next) {\n                                int h = e.hash;\n                                TreeNode<K,V> p = new TreeNode<K,V>\n                                    (h, e.key, e.val, null, null);\n                                if ((h & n) == 0) {\n                                    if ((p.prev = loTail) == null)\n                                        lo = p;\n                                    else\n                                        loTail.next = p;\n                                    loTail = p;\n                                    ++lc;\n                                }\n                                else {\n                                    if ((p.prev = hiTail) == null)\n                                        hi = p;\n                                    else\n                                        hiTail.next = p;\n                                    hiTail = p;\n                                    ++hc;\n                                }\n                            }\n                            ln = (lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) :\n                                (hc != 0) ? new TreeBin<K,V>(lo) : t;\n                            hn = (hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) :\n                                (lc != 0) ? new TreeBin<K,V>(hi) : t;\n                            setTabAt(nextTab, i, ln);\n                            setTabAt(nextTab, i + n, hn);\n                            setTabAt(tab, i, fwd);\n                            advance = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ```\n","source":"_posts/hello-world.md","raw":"---\ntitle: ConcurrentHashMap\n---\n### 线程安全\n\n利用CAS自旋锁+Synchronized保证并发更新安全\n\n底层使用数组+链表+红黑树实现\n\nkey和value不能为null\n\n### 创建ConcurrentHashMap\n\n- 和HashMap不同, 创建对象时指定初始容量会进行计算，计算方式是  n + n / 2 + 1\n- 实际设置的初始容量会比传入的大，同时是2的幂的一个值.\n\n### 关键参数sizeCtl\n\n1. sizeCtl为0, 表示数组未初始化, 且初始容量为16\n2. sizeCtl为正数, 如果数组未初始化，则记录的是数组初始容量，如果已经初始化，则记录数组扩容阈值（初始容量*0.75）\n3. sizeCtl为-1， 表示数组正在初始化\n4. sizeCtl小于0且不是-1，表示数组正在扩容,-(1-n)表示n个线程正在对数组扩容\n\n### 结构\n\n和HashMap一样， 用数组保存数据， Hash碰撞的保存成链表或者红黑树，转换条件是链表长度8同时数组长度大于等于64\n\n### 注意\n\n1. 初始化容量计算\n\n    初始容量采用公式 n + n / 2 + 1, 例如创建时指定32, 则根据公式  32 + 32 / 2 + 1 = 49.  然后会取49之后的2的幂数是64\n\n2. 多线程协助扩容\n\n    在扩容过程中会根据CPU按段对数组进行迁移处理, 对处理过的元素进行标记, 当有另一个线程添加元素发现是标记元素时, 则协助扩容, 也领取一段元素进行扩容处理\n\n    处理完成后再次循环领取任务处理, 处理是从数组末尾向前处理的, 最小的段大小是16个元素\n\n3. 元素数量计数\n\n    元素计数采用CAS赋值和赋值失败对数组元素赋值的方式进行, CAS对baseCount累加失败, 则循环对数组中的元素进行累加操作, 数组累加操作成功一次就跳出, 失败则重新计算索引再次尝试累加\n\n    总元素个数是baseCount+数组元素累加的值\n\n4. 大量的使用CAS自旋操作, 以避免使用锁\n\n### 获取索引\n\n获取索引和HashMap不同，不是直接tab[i]\n\n使用Unsafe.getObjectVolatie()获取索引元素， 虽然table是用volatile修饰的，但是无法保证线程每次都能拿到table最新元素，用这个方法可以直接获取内存的数据，保证每次拿到数据都是最新的\n\n### 初始化Table\n\n在添加元素时， 如果Table为空则进行初始化\n\n- 初始化过程中， 会判断sizeCtl, 如果小于0则表示已经有线程在初始化, 当前线程让出CPU\n- sizeCtl在初始化前保存的时候初始化容量, 初始化完成后保存扩容阈值\n- sc = n - (n >>> 2);计算扩容阈值, n>>>2就是n除以4, n - n / 4就是n乘以4分之一n. 即sc = 0.75*n. 用右移计算避免除法的性能损耗\n\n```java\nprivate final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    while ((tab = table) == null || tab.length == 0) {\n\t\t\t\t// 小于0表示其他线程正在初始化Table, 当前线程调用yield方法让出CPU时间片\n        if ((sc = sizeCtl) < 0)\n            Thread.yield(); // lost initialization race; just spin\n\t\t\t\t// 以原子性操作对sizeCtl赋值成-1, 表示正在扩容\n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n\t\t\t\t\t\t\t\t\t\t// 初始化容量\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\t\t\t\t\t// 创建数组\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    // 计算扩容阈值\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n\t\t\t\t\t\t\t\t// 初始化完成, sizeCtl保存扩容阈值\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n### 添加元素\n\n- 添加元素时判断Table是否为空, 如果为空则执行上述的初始化方法\n- 初始化完成后, 添加操作会有3种情况发生\n    1. 要添加的key对应的Table数组索引位置为空, 则以CAS形式将添加的元素放到对应的索引位置上, 此处可能出现多个线程同时进入数组为空的结点, 所以要CAS赋值, 一个线程赋值成功, 第二个线程赋值就会失败走下一次循环, 进入下边的逻辑\n\n        ```java\n        // 计算要添加的key对于数组的索引下标\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n        \t\t// 以原子性操作对这个索引赋值, 将要添加的结点放到索引位置上\n            if (casTabAt(tab, i, null, new Node<K,V>(hash, key, value, null)))\n        \t\t    break;                   // no lock when adding to empty bin\n        }\n        ```\n\n    2. Table数组正在扩容, 则触发协助扩容逻辑\n    3. 其他情况, 出现了hash碰撞, 即通过key的hash获取到了元素, 则要判断这个key是否在这个元素对应的桶内\n        - 对数组的这个元素进行加锁, 确保只有一个线程能操作这个元素对于的桶（链表或红黑树）\n        - 再次获取元素判断\n        - 通过hash值来判断这个元素结点是链表还是红黑树\n            - 链表, 则循环链表, 如果hash和key都相同, 则表示是覆盖已有key的操作, 否则遍历到链表尾, 将新元素结点添加到链表尾部\n            - 红黑树, 将新元素结点添加到树里\n\n            ```java\n            // 加锁, f是数组Table的元素, 对其加锁保证多个线程只能一个线程操作当前元素对应的桶\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n            \t\t\t\t// 链表的hash值是正数或0\n                    if (fh >= 0) {\n                        binCount = 1;\n            \t\t\t\t\t\t// 循环链表\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n            \t\t\t\t\t\t\t\t// 当key相同时, 表示key已经存在了, 进行值覆盖操作\n                            if (e.hash == hash && ((ek = e.key) == key || (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n            \t\t\t\t\t\t\t\t// 把新的元素结点添加到链表尾部\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key, value, null);\n                                break;\n                            }\n                        }\n                    }\n            \t\t\t\t// 元素结点是红黑树\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key, value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            ```\n\n### 链表转红黑树\n\n- 当添加元素完成后, 判断当前链表长度是否大于8, 如果是8则调用转换红黑树方法\n\n    ```java\n    if (binCount != 0) {\n    \t\t// 链表长度大于等于8则进入转换方法\n        if (binCount >= TREEIFY_THRESHOLD)\n            treeifyBin(tab, i);\n        if (oldVal != null)\n            return oldVal;\n        break;\n    }\n    ```\n\n- 进入转换方法, 再次判断Table元素结点是否小于64个, 如果小于则只进行扩容, 大于等于64个则转成红黑树\n\n    ```java\n    private final void treeifyBin(Node<K,V>[] tab, int index) {\n    \t\tNode<K,V> b; int n, sc;\n    \t\tif (tab != null) {\n    \t\t\t\t// 先判断数组Table的元素个数是否小于64个, 小于的话调用扩容方法\n    \t\t    if ((n = tab.length) < MIN_TREEIFY_CAPACITY)\n    \t\t        tryPresize(n << 1);\n    \t\t\t\t// 大于等于64个元素进行转成红黑树操作\n    \t\t    else if ((b = tabAt(tab, index)) != null && b.hash >= 0) {\n    \t\t        synchronized (b) {\n    \t\t            if (tabAt(tab, index) == b) {\n    \t\t                TreeNode<K,V> hd = null, tl = null;\n    \t\t                for (Node<K,V> e = b; e != null; e = e.next) {\n    \t\t                    TreeNode<K,V> p =\n    \t\t                        new TreeNode<K,V>(e.hash, e.key, e.val, null, null);\n    \t\t                    if ((p.prev = tl) == null)\n    \t\t                        hd = p;\n    \t\t                    else\n    \t\t                        tl.next = p;\n    \t\t                    tl = p;\n    \t\t                }\n    \t\t                setTabAt(tab, index, new TreeBin<K,V>(hd));\n    \t\t            }\n    \t\t        }\n    \t\t    }\n    \t\t}\n    }\n    ```\n\n### 统计操作\n\n- 添加完成后进行元素个数统计操作\n\n    ```java\n    addCount(1L, binCount);\n    ```\n\n- 进入统计方法\n\n    当添加操作完成后需要对当前元素个数据进行累加操作, 而多线程操作时的累加操作会发生并发问题, 此处采用一个bashCount和一个数组的形式进行计算, 当bashCount累加操作失败时, 则将累加的值在数组中进行累加, 最终的元素个数是bashCount和数组各个元素的总和\n\n    统计元素个数完成后, 计算当前元素的总个数, 再判断是否超出阈值进行扩容处理\n\n    ```java\n    // 添加计数\n    private final void addCount(long x, int check) {\n    \t\t// CounterCell数组就是保存元素个数的数组\n        CounterCell[] as; long b, s;\n        if ((as = counterCells) != null || !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {\n            CounterCell a; long v; int m;\n            boolean uncontended = true;\n            if (as == null || (m = as.length - 1) < 0 || (a = as[ThreadLocalRandom.getProbe() & m]) == null || !(uncontended = U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {\n                // 关键方法, 进行元素个数添加操作\n    \t\t\t\t\t\tfullAddCount(x, uncontended);\n                return;\n            }\n            if (check <= 1)\n                return;\n    \t\t\t\t// 统计数组元素个数\n            s = sumCount();\n        }\n    \t\t// 当发生添加操作时进入此逻辑判断是否要对数组扩容\n        if (check >= 0) {\n            Node<K,V>[] tab, nt; int n, sc;\n    \t\t\t\t// 此时sizeCtl保存的是扩容阈值, s为当前数组元素个数, 此处判断是否需要扩容\n            while (s >= (long)(sc = sizeCtl) && (tab = table) != null && (n = tab.length) < MAXIMUM_CAPACITY) {\n                int rs = resizeStamp(n);\n    \t\t\t\t\t\t// 小于0则表示当前有线程在扩容, 进行协助扩容操作\n                if (sc < 0) {\n                    if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt = nextTable) == null || transferIndex <= 0)\n                        break;\n                    if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))\n                        transfer(tab, nt);\n                }\n    \t\t\t\t\t\t// 大于等于0表示开始扩容, 同时将sizeCtl的值设置成负数\n                else if (U.compareAndSwapInt(this, SIZECTL, sc, (rs << RESIZE_STAMP_SHIFT) + 2))\n    \t\t\t\t\t\t\t\t// 扩容方法\n                    transfer(tab, null);\n                s = sumCount();\n            }\n        }\n    }\n    ```\n\n### 添加计数\n\n```java\nprivate final void fullAddCount(long x, boolean wasUncontended) {\n\t  int h;\n\t\t// 计算统计数组的hash值\n\t  if ((h = ThreadLocalRandom.getProbe()) == 0) {\n\t      ThreadLocalRandom.localInit();      // force initialization\n\t      h = ThreadLocalRandom.getProbe();\n\t      wasUncontended = true;\n\t  }\n\t  boolean collide = false;                // True if last slot nonempty\n\t  for (;;) {\n\t      CounterCell[] as; CounterCell a; int n; long v;\n\t\t\t\t// baseCount添加失败了, 同时数组不为空\n\t      if ((as = counterCells) != null && (n = as.length) > 0) {\n\t\t\t\t\t\t// hash对应数组元素为空, 进行创建元素\n\t          if ((a = as[(n - 1) & h]) == null) {\n\t              if (cellsBusy == 0) {            // Try to attach new Cell\n\t\t\t\t\t\t\t\t\t\t// 调用有参构造器进行创建对象\n\t                  CounterCell r = new CounterCell(x); // Optimistic create\n\t                  if (cellsBusy == 0 && U.compareAndSwapInt(this, CELLSBUSY, 0, 1)) {\n\t                      boolean created = false;\n\t                      try {               // Recheck under lock\n\t                          CounterCell[] rs; int m, j;\n\t                          if ((rs = counterCells) != null && (m = rs.length) > 0 && rs[j = (m - 1) & h] == null) {\n\t                              rs[j] = r;\n\t                              created = true;\n\t                          }\n\t                      } finally {\n\t                          cellsBusy = 0;\n\t                      }\n\t\t\t\t\t\t\t\t\t\t\t\t// 经过一系列判断, 创建成功跳出循环, 否则下次循环\n\t                      if (created)\n\t                          break;\n\t                      continue;           // Slot is now non-empty\n\t                  }\n\t              }\n\t              collide = false;\n\t          }\n\t          else if (!wasUncontended)       // CAS already known to fail\n\t              wasUncontended = true;      // Continue after rehash\n\t          else if (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))\n\t              break;\n\t\t\t\t\t\t// 数组大小超出CPU核数\n\t          else if (counterCells != as || n >= NCPU)\n\t              collide = false;            // At max size or stale\n\t          else if (!collide)\n\t              collide = true;\n\t          else if (cellsBusy == 0 && U.compareAndSwapInt(this, CELLSBUSY, 0, 1)) {\n\t              try {\n\t                  if (counterCells == as) {// Expand table unless stale\n\t                      CounterCell[] rs = new CounterCell[n << 1];\n\t                      for (int i = 0; i < n; ++i)\n\t                          rs[i] = as[i];\n\t                      counterCells = rs;\n\t                  }\n\t              } finally {\n\t                  cellsBusy = 0;\n\t              }\n\t              collide = false;\n\t              continue;                   // Retry with expanded table\n\t          }\n\t          h = ThreadLocalRandom.advanceProbe(h);\n\t      }\n\t\t\t\t// 数组为空, 则进行创建数组操作\n\t      else if (cellsBusy == 0 && counterCells == as && U.compareAndSwapInt(this, CELLSBUSY, 0, 1)) {\n\t          boolean init = false;\n\t          try {                           // Initialize table\n\t              if (counterCells == as) {\n\t                  CounterCell[] rs = new CounterCell[2];\n\t                  rs[h & 1] = new CounterCell(x);\n\t                  counterCells = rs;\n\t                  init = true;\n\t              }\n\t          } finally {\n\t              cellsBusy = 0;\n\t          }\n\t          if (init)\n\t              break;\n\t      }\n\t\t\t\t// 优先尝试对baseCount进行累加操作, 操作成功就跳出循环, 否则进行下次循环进入对数组操作逻辑\n\t      else if (U.compareAndSwapLong(this, BASECOUNT, v = baseCount, v + x))\n\t          break;                          // Fall back on using base\n\t  }\n}\n```\n\n### 扩容方法\n\n- 扩容有两种情况, 当前线程扩容和协助扩容\n\n    扩容的原理, 多线程可能同时进行扩容, 那么将整个数组根据CPU核数计算出平均的段, 每个线程处理一个段, 当处理完一个元素结点后, 在这个位置放置一个ForwardingNode元素结点占位表示正在处理, 即MOVED\n\n    新建一个2倍原数组大小的nextTable数组,用来保存扩容后的新数组\n\n    ```java\n    private final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) {\n        int n = tab.length, stride;\n    \t\t// 根据当前CPU核数计算要处理的段大小, 最小16个元素\n        if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE)\n            stride = MIN_TRANSFER_STRIDE; // subdivide range\n    \t\t// 新数组为null, 则创建2倍大的新数组\n        if (nextTab == null) {            // initiating\n            try {\n                @SuppressWarnings(\"unchecked\")\n                Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n << 1];\n                nextTab = nt;\n            } catch (Throwable ex) {      // try to cope with OOME\n                sizeCtl = Integer.MAX_VALUE;\n                return;\n            }\n            nextTable = nextTab;\n            transferIndex = n;\n        }\n        int nextn = nextTab.length;\n        ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab);\n        boolean advance = true;\n        boolean finishing = false; // to ensure sweep before committing nextTab\n        for (int i = 0, bound = 0;;) {\n            Node<K,V> f; int fh;\n            while (advance) {\n                int nextIndex, nextBound;\n                if (--i >= bound || finishing)\n                    advance = false;\n                else if ((nextIndex = transferIndex) <= 0) {\n                    i = -1;\n                    advance = false;\n                }\n                else if (U.compareAndSwapInt (this, TRANSFERINDEX, nextIndex, nextBound = (nextIndex > stride ? nextIndex - stride : 0))) {\n                    bound = nextBound;\n                    i = nextIndex - 1;\n                    advance = false;\n                }\n            }\n            if (i < 0 || i >= n || i + n >= nextn) {\n                int sc;\n    \t\t\t\t\t\t// 扩容完成, 将新的table赋值给原table\n                if (finishing) {\n                    nextTable = null;\n                    table = nextTab;\n                    sizeCtl = (n << 1) - (n >>> 1);\n                    return;\n                }\n    \t\t\t\t\t\t// 判断是否扩容完成\n                if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) {\n                    if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT)\n                        return;\n                    finishing = advance = true;\n                    i = n; // recheck before commit\n                }\n            }\n            else if ((f = tabAt(tab, i)) == null)\n                advance = casTabAt(tab, i, null, fwd);\n            else if ((fh = f.hash) == MOVED)\n                advance = true; // already processed\n            else {\n                synchronized (f) {\n                    if (tabAt(tab, i) == f) {\n                        Node<K,V> ln, hn;\n                        if (fh >= 0) {\n                            int runBit = fh & n;\n                            Node<K,V> lastRun = f;\n                            for (Node<K,V> p = f.next; p != null; p = p.next) {\n                                int b = p.hash & n;\n                                if (b != runBit) {\n                                    runBit = b;\n                                    lastRun = p;\n                                }\n                            }\n                            if (runBit == 0) {\n                                ln = lastRun;\n                                hn = null;\n                            }\n                            else {\n                                hn = lastRun;\n                                ln = null;\n                            }\n                            for (Node<K,V> p = f; p != lastRun; p = p.next) {\n                                int ph = p.hash; K pk = p.key; V pv = p.val;\n                                if ((ph & n) == 0)\n                                    ln = new Node<K,V>(ph, pk, pv, ln);\n                                else\n                                    hn = new Node<K,V>(ph, pk, pv, hn);\n                            }\n                            setTabAt(nextTab, i, ln);\n                            setTabAt(nextTab, i + n, hn);\n                            setTabAt(tab, i, fwd);\n                            advance = true;\n                        }\n                        else if (f instanceof TreeBin) {\n                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n                            TreeNode<K,V> lo = null, loTail = null;\n                            TreeNode<K,V> hi = null, hiTail = null;\n                            int lc = 0, hc = 0;\n                            for (Node<K,V> e = t.first; e != null; e = e.next) {\n                                int h = e.hash;\n                                TreeNode<K,V> p = new TreeNode<K,V>\n                                    (h, e.key, e.val, null, null);\n                                if ((h & n) == 0) {\n                                    if ((p.prev = loTail) == null)\n                                        lo = p;\n                                    else\n                                        loTail.next = p;\n                                    loTail = p;\n                                    ++lc;\n                                }\n                                else {\n                                    if ((p.prev = hiTail) == null)\n                                        hi = p;\n                                    else\n                                        hiTail.next = p;\n                                    hiTail = p;\n                                    ++hc;\n                                }\n                            }\n                            ln = (lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) :\n                                (hc != 0) ? new TreeBin<K,V>(lo) : t;\n                            hn = (hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) :\n                                (lc != 0) ? new TreeBin<K,V>(hi) : t;\n                            setTabAt(nextTab, i, ln);\n                            setTabAt(nextTab, i + n, hn);\n                            setTabAt(tab, i, fwd);\n                            advance = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ```\n","slug":"hello-world","published":1,"date":"2021-08-25T15:36:57.781Z","updated":"2021-08-25T16:59:06.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksrrpift0006yguqhuzkb30e","content":"<h3 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h3><p>利用CAS自旋锁+Synchronized保证并发更新安全</p>\n<p>底层使用数组+链表+红黑树实现</p>\n<p>key和value不能为null</p>\n<h3 id=\"创建ConcurrentHashMap\"><a href=\"#创建ConcurrentHashMap\" class=\"headerlink\" title=\"创建ConcurrentHashMap\"></a>创建ConcurrentHashMap</h3><ul>\n<li>和HashMap不同, 创建对象时指定初始容量会进行计算，计算方式是  n + n / 2 + 1</li>\n<li>实际设置的初始容量会比传入的大，同时是2的幂的一个值.</li>\n</ul>\n<h3 id=\"关键参数sizeCtl\"><a href=\"#关键参数sizeCtl\" class=\"headerlink\" title=\"关键参数sizeCtl\"></a>关键参数sizeCtl</h3><ol>\n<li>sizeCtl为0, 表示数组未初始化, 且初始容量为16</li>\n<li>sizeCtl为正数, 如果数组未初始化，则记录的是数组初始容量，如果已经初始化，则记录数组扩容阈值（初始容量*0.75）</li>\n<li>sizeCtl为-1， 表示数组正在初始化</li>\n<li>sizeCtl小于0且不是-1，表示数组正在扩容,-(1-n)表示n个线程正在对数组扩容</li>\n</ol>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>和HashMap一样， 用数组保存数据， Hash碰撞的保存成链表或者红黑树，转换条件是链表长度8同时数组长度大于等于64</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ol>\n<li><p>初始化容量计算</p>\n<p> 初始容量采用公式 n + n / 2 + 1, 例如创建时指定32, 则根据公式  32 + 32 / 2 + 1 = 49.  然后会取49之后的2的幂数是64</p>\n</li>\n<li><p>多线程协助扩容</p>\n<p> 在扩容过程中会根据CPU按段对数组进行迁移处理, 对处理过的元素进行标记, 当有另一个线程添加元素发现是标记元素时, 则协助扩容, 也领取一段元素进行扩容处理</p>\n<p> 处理完成后再次循环领取任务处理, 处理是从数组末尾向前处理的, 最小的段大小是16个元素</p>\n</li>\n<li><p>元素数量计数</p>\n<p> 元素计数采用CAS赋值和赋值失败对数组元素赋值的方式进行, CAS对baseCount累加失败, 则循环对数组中的元素进行累加操作, 数组累加操作成功一次就跳出, 失败则重新计算索引再次尝试累加</p>\n<p> 总元素个数是baseCount+数组元素累加的值</p>\n</li>\n<li><p>大量的使用CAS自旋操作, 以避免使用锁</p>\n</li>\n</ol>\n<h3 id=\"获取索引\"><a href=\"#获取索引\" class=\"headerlink\" title=\"获取索引\"></a>获取索引</h3><p>获取索引和HashMap不同，不是直接tab[i]</p>\n<p>使用Unsafe.getObjectVolatie()获取索引元素， 虽然table是用volatile修饰的，但是无法保证线程每次都能拿到table最新元素，用这个方法可以直接获取内存的数据，保证每次拿到数据都是最新的</p>\n<h3 id=\"初始化Table\"><a href=\"#初始化Table\" class=\"headerlink\" title=\"初始化Table\"></a>初始化Table</h3><p>在添加元素时， 如果Table为空则进行初始化</p>\n<ul>\n<li>初始化过程中， 会判断sizeCtl, 如果小于0则表示已经有线程在初始化, 当前线程让出CPU</li>\n<li>sizeCtl在初始化前保存的时候初始化容量, 初始化完成后保存扩容阈值</li>\n<li>sc = n - (n &gt;&gt;&gt; 2);计算扩容阈值, n&gt;&gt;&gt;2就是n除以4, n - n / 4就是n乘以4分之一n. 即sc = 0.75*n. 用右移计算避免除法的性能损耗</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 小于0表示其他线程正在初始化Table, 当前线程调用yield方法让出CPU时间片</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            Thread.yield(); <span class=\"comment\">// lost initialization race; just spin</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 以原子性操作对sizeCtl赋值成-1, 表示正在扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 初始化容量</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> n = (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 创建数组</span></span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n];</span><br><span class=\"line\">                    table = tab = nt;</span><br><span class=\"line\">                    <span class=\"comment\">// 计算扩容阈值</span></span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 初始化完成, sizeCtl保存扩容阈值</span></span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h3><ul>\n<li><p>添加元素时判断Table是否为空, 如果为空则执行上述的初始化方法</p>\n</li>\n<li><p>初始化完成后, 添加操作会有3种情况发生</p>\n<ol>\n<li><p>要添加的key对应的Table数组索引位置为空, 则以CAS形式将添加的元素放到对应的索引位置上, 此处可能出现多个线程同时进入数组为空的结点, 所以要CAS赋值, 一个线程赋值成功, 第二个线程赋值就会失败走下一次循环, 进入下边的逻辑</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 计算要添加的key对于数组的索引下标</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 以原子性操作对这个索引赋值, 将要添加的结点放到索引位置上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key, value, <span class=\"keyword\">null</span>)))</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;                   <span class=\"comment\">// no lock when adding to empty bin</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Table数组正在扩容, 则触发协助扩容逻辑</p>\n</li>\n<li><p>其他情况, 出现了hash碰撞, 即通过key的hash获取到了元素, 则要判断这个key是否在这个元素对应的桶内</p>\n<ul>\n<li><p>对数组的这个元素进行加锁, 确保只有一个线程能操作这个元素对于的桶（链表或红黑树）</p>\n</li>\n<li><p>再次获取元素判断</p>\n</li>\n<li><p>通过hash值来判断这个元素结点是链表还是红黑树</p>\n<ul>\n<li>链表, 则循环链表, 如果hash和key都相同, 则表示是覆盖已有key的操作, 否则遍历到链表尾, 将新元素结点添加到链表尾部</li>\n<li>红黑树, 将新元素结点添加到树里</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加锁, f是数组Table的元素, 对其加锁保证多个线程只能一个线程操作当前元素对应的桶</span></span><br><span class=\"line\"><span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 链表的hash值是正数或0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 循环链表</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                K ek;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 当key相同时, 表示key已经存在了, 进行值覆盖操作</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp; ((ek = e.key) == key || (ek != <span class=\"keyword\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                    oldVal = e.val;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                        e.val = value;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 把新的元素结点添加到链表尾部</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    pred.next = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 元素结点是红黑树</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; p;</span><br><span class=\"line\">            binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key, value)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                oldVal = p.val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                    p.val = value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"链表转红黑树\"><a href=\"#链表转红黑树\" class=\"headerlink\" title=\"链表转红黑树\"></a>链表转红黑树</h3><ul>\n<li><p>当添加元素完成后, 判断当前链表长度是否大于8, 如果是8则调用转换红黑树方法</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 链表长度大于等于8则进入转换方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">        treeifyBin(tab, i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldVal != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>进入转换方法, 再次判断Table元素结点是否小于64个, 如果小于则只进行扩容, 大于等于64个则转成红黑树</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">treeifyBin</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;K,V&gt; b; <span class=\"keyword\">int</span> n, sc;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 先判断数组Table的元素个数是否小于64个, 小于的话调用扩容方法</span></span><br><span class=\"line\">\t\t    <span class=\"keyword\">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class=\"line\">\t\t        tryPresize(n &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 大于等于64个元素进行转成红黑树操作</span></span><br><span class=\"line\">\t\t    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((b = tabAt(tab, index)) != <span class=\"keyword\">null</span> &amp;&amp; b.hash &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t        <span class=\"keyword\">synchronized</span> (b) &#123;</span><br><span class=\"line\">\t\t            <span class=\"keyword\">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class=\"line\">\t\t                TreeNode&lt;K,V&gt; hd = <span class=\"keyword\">null</span>, tl = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t                <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = b; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">\t\t                    TreeNode&lt;K,V&gt; p =</span><br><span class=\"line\">\t\t                        <span class=\"keyword\">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t                    <span class=\"keyword\">if</span> ((p.prev = tl) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t                        hd = p;</span><br><span class=\"line\">\t\t                    <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t                        tl.next = p;</span><br><span class=\"line\">\t\t                    tl = p;</span><br><span class=\"line\">\t\t                &#125;</span><br><span class=\"line\">\t\t                setTabAt(tab, index, <span class=\"keyword\">new</span> TreeBin&lt;K,V&gt;(hd));</span><br><span class=\"line\">\t\t            &#125;</span><br><span class=\"line\">\t\t        &#125;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"统计操作\"><a href=\"#统计操作\" class=\"headerlink\" title=\"统计操作\"></a>统计操作</h3><ul>\n<li><p>添加完成后进行元素个数统计操作</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addCount(<span class=\"number\">1L</span>, binCount);</span><br></pre></td></tr></table></figure></li>\n<li><p>进入统计方法</p>\n<p>  当添加操作完成后需要对当前元素个数据进行累加操作, 而多线程操作时的累加操作会发生并发问题, 此处采用一个bashCount和一个数组的形式进行计算, 当bashCount累加操作失败时, 则将累加的值在数组中进行累加, 最终的元素个数是bashCount和数组各个元素的总和</p>\n<p>  统计元素个数完成后, 计算当前元素的总个数, 再判断是否超出阈值进行扩容处理</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加计数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addCount</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">int</span> check)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// CounterCell数组就是保存元素个数的数组</span></span><br><span class=\"line\">    CounterCell[] as; <span class=\"keyword\">long</span> b, s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"keyword\">null</span> || !U.compareAndSwapLong(<span class=\"keyword\">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class=\"line\">        CounterCell a; <span class=\"keyword\">long</span> v; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> uncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as == <span class=\"keyword\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> || (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class=\"keyword\">null</span> || !(uncontended = U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 关键方法, 进行元素个数添加操作</span></span><br><span class=\"line\">\t\t\t\t\t\tfullAddCount(x, uncontended);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 统计数组元素个数</span></span><br><span class=\"line\">        s = sumCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当发生添加操作时进入此逻辑判断是否要对数组扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab, nt; <span class=\"keyword\">int</span> n, sc;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 此时sizeCtl保存的是扩容阈值, s为当前数组元素个数, 此处判断是否需要扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s &gt;= (<span class=\"keyword\">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rs = resizeStamp(n);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 小于0则表示当前有线程在扩容, 进行协助扩容操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> || sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class=\"keyword\">null</span> || transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    transfer(tab, nt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 大于等于0表示开始扩容, 同时将sizeCtl的值设置成负数</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class=\"number\">2</span>))</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 扩容方法</span></span><br><span class=\"line\">                transfer(tab, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            s = sumCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"添加计数\"><a href=\"#添加计数\" class=\"headerlink\" title=\"添加计数\"></a>添加计数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">fullAddCount</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">boolean</span> wasUncontended)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 计算统计数组的hash值</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> ((h = ThreadLocalRandom.getProbe()) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t      ThreadLocalRandom.localInit();      <span class=\"comment\">// force initialization</span></span><br><span class=\"line\">\t      h = ThreadLocalRandom.getProbe();</span><br><span class=\"line\">\t      wasUncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">boolean</span> collide = <span class=\"keyword\">false</span>;                <span class=\"comment\">// True if last slot nonempty</span></span><br><span class=\"line\">\t  <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t      CounterCell[] as; CounterCell a; <span class=\"keyword\">int</span> n; <span class=\"keyword\">long</span> v;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// baseCount添加失败了, 同时数组不为空</span></span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"keyword\">null</span> &amp;&amp; (n = as.length) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// hash对应数组元素为空, 进行创建元素</span></span><br><span class=\"line\">\t          <span class=\"keyword\">if</span> ((a = as[(n - <span class=\"number\">1</span>) &amp; h]) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t              <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span>) &#123;            <span class=\"comment\">// Try to attach new Cell</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 调用有参构造器进行创建对象</span></span><br><span class=\"line\">\t                  CounterCell r = <span class=\"keyword\">new</span> CounterCell(x); <span class=\"comment\">// Optimistic create</span></span><br><span class=\"line\">\t                  <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span> &amp;&amp; U.compareAndSwapInt(<span class=\"keyword\">this</span>, CELLSBUSY, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t                      <span class=\"keyword\">boolean</span> created = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t                      <span class=\"keyword\">try</span> &#123;               <span class=\"comment\">// Recheck under lock</span></span><br><span class=\"line\">\t                          CounterCell[] rs; <span class=\"keyword\">int</span> m, j;</span><br><span class=\"line\">\t                          <span class=\"keyword\">if</span> ((rs = counterCells) != <span class=\"keyword\">null</span> &amp;&amp; (m = rs.length) &gt; <span class=\"number\">0</span> &amp;&amp; rs[j = (m - <span class=\"number\">1</span>) &amp; h] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t                              rs[j] = r;</span><br><span class=\"line\">\t                              created = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t                          &#125;</span><br><span class=\"line\">\t                      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t                          cellsBusy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t                      &#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 经过一系列判断, 创建成功跳出循环, 否则下次循环</span></span><br><span class=\"line\">\t                      <span class=\"keyword\">if</span> (created)</span><br><span class=\"line\">\t                          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t                      <span class=\"keyword\">continue</span>;           <span class=\"comment\">// Slot is now non-empty</span></span><br><span class=\"line\">\t                  &#125;</span><br><span class=\"line\">\t              &#125;</span><br><span class=\"line\">\t              collide = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t          &#125;</span><br><span class=\"line\">\t          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!wasUncontended)       <span class=\"comment\">// CAS already known to fail</span></span><br><span class=\"line\">\t              wasUncontended = <span class=\"keyword\">true</span>;      <span class=\"comment\">// Continue after rehash</span></span><br><span class=\"line\">\t          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))</span><br><span class=\"line\">\t              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 数组大小超出CPU核数</span></span><br><span class=\"line\">\t          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (counterCells != as || n &gt;= NCPU)</span><br><span class=\"line\">\t              collide = <span class=\"keyword\">false</span>;            <span class=\"comment\">// At max size or stale</span></span><br><span class=\"line\">\t          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!collide)</span><br><span class=\"line\">\t              collide = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span> &amp;&amp; U.compareAndSwapInt(<span class=\"keyword\">this</span>, CELLSBUSY, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t                  <span class=\"keyword\">if</span> (counterCells == as) &#123;<span class=\"comment\">// Expand table unless stale</span></span><br><span class=\"line\">\t                      CounterCell[] rs = <span class=\"keyword\">new</span> CounterCell[n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">\t                      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t                          rs[i] = as[i];</span><br><span class=\"line\">\t                      counterCells = rs;</span><br><span class=\"line\">\t                  &#125;</span><br><span class=\"line\">\t              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t                  cellsBusy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t              &#125;</span><br><span class=\"line\">\t              collide = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t              <span class=\"keyword\">continue</span>;                   <span class=\"comment\">// Retry with expanded table</span></span><br><span class=\"line\">\t          &#125;</span><br><span class=\"line\">\t          h = ThreadLocalRandom.advanceProbe(h);</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 数组为空, 则进行创建数组操作</span></span><br><span class=\"line\">\t      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span> &amp;&amp; counterCells == as &amp;&amp; U.compareAndSwapInt(<span class=\"keyword\">this</span>, CELLSBUSY, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t          <span class=\"keyword\">boolean</span> init = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t          <span class=\"keyword\">try</span> &#123;                           <span class=\"comment\">// Initialize table</span></span><br><span class=\"line\">\t              <span class=\"keyword\">if</span> (counterCells == as) &#123;</span><br><span class=\"line\">\t                  CounterCell[] rs = <span class=\"keyword\">new</span> CounterCell[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t                  rs[h &amp; <span class=\"number\">1</span>] = <span class=\"keyword\">new</span> CounterCell(x);</span><br><span class=\"line\">\t                  counterCells = rs;</span><br><span class=\"line\">\t                  init = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t              &#125;</span><br><span class=\"line\">\t          &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t              cellsBusy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t          &#125;</span><br><span class=\"line\">\t          <span class=\"keyword\">if</span> (init)</span><br><span class=\"line\">\t              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 优先尝试对baseCount进行累加操作, 操作成功就跳出循环, 否则进行下次循环进入对数组操作逻辑</span></span><br><span class=\"line\">\t      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapLong(<span class=\"keyword\">this</span>, BASECOUNT, v = baseCount, v + x))</span><br><span class=\"line\">\t          <span class=\"keyword\">break</span>;                          <span class=\"comment\">// Fall back on using base</span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扩容方法\"><a href=\"#扩容方法\" class=\"headerlink\" title=\"扩容方法\"></a>扩容方法</h3><ul>\n<li><p>扩容有两种情况, 当前线程扩容和协助扩容</p>\n<p>  扩容的原理, 多线程可能同时进行扩容, 那么将整个数组根据CPU核数计算出平均的段, 每个线程处理一个段, 当处理完一个元素结点后, 在这个位置放置一个ForwardingNode元素结点占位表示正在处理, 即MOVED</p>\n<p>  新建一个2倍原数组大小的nextTable数组,用来保存扩容后的新数组</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = tab.length, stride;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据当前CPU核数计算要处理的段大小, 最小16个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((stride = (NCPU &gt; <span class=\"number\">1</span>) ? (n &gt;&gt;&gt; <span class=\"number\">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class=\"line\">        stride = MIN_TRANSFER_STRIDE; <span class=\"comment\">// subdivide range</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 新数组为null, 则创建2倍大的新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextTab == <span class=\"keyword\">null</span>) &#123;            <span class=\"comment\">// initiating</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">            nextTab = nt;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;      <span class=\"comment\">// try to cope with OOME</span></span><br><span class=\"line\">            sizeCtl = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nextTable = nextTab;</span><br><span class=\"line\">        transferIndex = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nextn = nextTab.length;</span><br><span class=\"line\">    ForwardingNode&lt;K,V&gt; fwd = <span class=\"keyword\">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> finishing = <span class=\"keyword\">false</span>; <span class=\"comment\">// to ensure sweep before committing nextTab</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, bound = <span class=\"number\">0</span>;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"keyword\">int</span> fh;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (advance) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nextIndex, nextBound;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--i &gt;= bound || finishing)</span><br><span class=\"line\">                advance = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((nextIndex = transferIndex) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                i = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt (<span class=\"keyword\">this</span>, TRANSFERINDEX, nextIndex, nextBound = (nextIndex &gt; stride ? nextIndex - stride : <span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">                bound = nextBound;</span><br><span class=\"line\">                i = nextIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 扩容完成, 将新的table赋值给原table</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (finishing) &#123;</span><br><span class=\"line\">                nextTable = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                table = nextTab;</span><br><span class=\"line\">                sizeCtl = (n &lt;&lt; <span class=\"number\">1</span>) - (n &gt;&gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 判断是否扩容完成</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc = sizeCtl, sc - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc - <span class=\"number\">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                finishing = advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                i = n; <span class=\"comment\">// recheck before commit</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i)) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            advance = casTabAt(tab, i, <span class=\"keyword\">null</span>, fwd);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            advance = <span class=\"keyword\">true</span>; <span class=\"comment\">// already processed</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    Node&lt;K,V&gt; ln, hn;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> runBit = fh &amp; n;</span><br><span class=\"line\">                        Node&lt;K,V&gt; lastRun = f;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class=\"keyword\">null</span>; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> b = p.hash &amp; n;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (b != runBit) &#123;</span><br><span class=\"line\">                                runBit = b;</span><br><span class=\"line\">                                lastRun = p;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (runBit == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            ln = lastRun;</span><br><span class=\"line\">                            hn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            hn = lastRun;</span><br><span class=\"line\">                            ln = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((ph &amp; n) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                                ln = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hn = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; lo = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; hi = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> lc = <span class=\"number\">0</span>, hc = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> h = e.hash;</span><br><span class=\"line\">                            TreeNode&lt;K,V&gt; p = <span class=\"keyword\">new</span> TreeNode&lt;K,V&gt;</span><br><span class=\"line\">                                (h, e.key, e.val, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((h &amp; n) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = loTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                    lo = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    loTail.next = p;</span><br><span class=\"line\">                                loTail = p;</span><br><span class=\"line\">                                ++lc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = hiTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                    hi = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    hiTail.next = p;</span><br><span class=\"line\">                                hiTail = p;</span><br><span class=\"line\">                                ++hc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class=\"line\">                            (hc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class=\"line\">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class=\"line\">                            (lc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h3><p>利用CAS自旋锁+Synchronized保证并发更新安全</p>\n<p>底层使用数组+链表+红黑树实现</p>\n<p>key和value不能为null</p>\n<h3 id=\"创建ConcurrentHashMap\"><a href=\"#创建ConcurrentHashMap\" class=\"headerlink\" title=\"创建ConcurrentHashMap\"></a>创建ConcurrentHashMap</h3><ul>\n<li>和HashMap不同, 创建对象时指定初始容量会进行计算，计算方式是  n + n / 2 + 1</li>\n<li>实际设置的初始容量会比传入的大，同时是2的幂的一个值.</li>\n</ul>\n<h3 id=\"关键参数sizeCtl\"><a href=\"#关键参数sizeCtl\" class=\"headerlink\" title=\"关键参数sizeCtl\"></a>关键参数sizeCtl</h3><ol>\n<li>sizeCtl为0, 表示数组未初始化, 且初始容量为16</li>\n<li>sizeCtl为正数, 如果数组未初始化，则记录的是数组初始容量，如果已经初始化，则记录数组扩容阈值（初始容量*0.75）</li>\n<li>sizeCtl为-1， 表示数组正在初始化</li>\n<li>sizeCtl小于0且不是-1，表示数组正在扩容,-(1-n)表示n个线程正在对数组扩容</li>\n</ol>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>和HashMap一样， 用数组保存数据， Hash碰撞的保存成链表或者红黑树，转换条件是链表长度8同时数组长度大于等于64</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ol>\n<li><p>初始化容量计算</p>\n<p> 初始容量采用公式 n + n / 2 + 1, 例如创建时指定32, 则根据公式  32 + 32 / 2 + 1 = 49.  然后会取49之后的2的幂数是64</p>\n</li>\n<li><p>多线程协助扩容</p>\n<p> 在扩容过程中会根据CPU按段对数组进行迁移处理, 对处理过的元素进行标记, 当有另一个线程添加元素发现是标记元素时, 则协助扩容, 也领取一段元素进行扩容处理</p>\n<p> 处理完成后再次循环领取任务处理, 处理是从数组末尾向前处理的, 最小的段大小是16个元素</p>\n</li>\n<li><p>元素数量计数</p>\n<p> 元素计数采用CAS赋值和赋值失败对数组元素赋值的方式进行, CAS对baseCount累加失败, 则循环对数组中的元素进行累加操作, 数组累加操作成功一次就跳出, 失败则重新计算索引再次尝试累加</p>\n<p> 总元素个数是baseCount+数组元素累加的值</p>\n</li>\n<li><p>大量的使用CAS自旋操作, 以避免使用锁</p>\n</li>\n</ol>\n<h3 id=\"获取索引\"><a href=\"#获取索引\" class=\"headerlink\" title=\"获取索引\"></a>获取索引</h3><p>获取索引和HashMap不同，不是直接tab[i]</p>\n<p>使用Unsafe.getObjectVolatie()获取索引元素， 虽然table是用volatile修饰的，但是无法保证线程每次都能拿到table最新元素，用这个方法可以直接获取内存的数据，保证每次拿到数据都是最新的</p>\n<h3 id=\"初始化Table\"><a href=\"#初始化Table\" class=\"headerlink\" title=\"初始化Table\"></a>初始化Table</h3><p>在添加元素时， 如果Table为空则进行初始化</p>\n<ul>\n<li>初始化过程中， 会判断sizeCtl, 如果小于0则表示已经有线程在初始化, 当前线程让出CPU</li>\n<li>sizeCtl在初始化前保存的时候初始化容量, 初始化完成后保存扩容阈值</li>\n<li>sc = n - (n &gt;&gt;&gt; 2);计算扩容阈值, n&gt;&gt;&gt;2就是n除以4, n - n / 4就是n乘以4分之一n. 即sc = 0.75*n. 用右移计算避免除法的性能损耗</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 小于0表示其他线程正在初始化Table, 当前线程调用yield方法让出CPU时间片</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            Thread.yield(); <span class=\"comment\">// lost initialization race; just spin</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 以原子性操作对sizeCtl赋值成-1, 表示正在扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 初始化容量</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> n = (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 创建数组</span></span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n];</span><br><span class=\"line\">                    table = tab = nt;</span><br><span class=\"line\">                    <span class=\"comment\">// 计算扩容阈值</span></span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 初始化完成, sizeCtl保存扩容阈值</span></span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h3><ul>\n<li><p>添加元素时判断Table是否为空, 如果为空则执行上述的初始化方法</p>\n</li>\n<li><p>初始化完成后, 添加操作会有3种情况发生</p>\n<ol>\n<li><p>要添加的key对应的Table数组索引位置为空, 则以CAS形式将添加的元素放到对应的索引位置上, 此处可能出现多个线程同时进入数组为空的结点, 所以要CAS赋值, 一个线程赋值成功, 第二个线程赋值就会失败走下一次循环, 进入下边的逻辑</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 计算要添加的key对于数组的索引下标</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 以原子性操作对这个索引赋值, 将要添加的结点放到索引位置上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key, value, <span class=\"keyword\">null</span>)))</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;                   <span class=\"comment\">// no lock when adding to empty bin</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Table数组正在扩容, 则触发协助扩容逻辑</p>\n</li>\n<li><p>其他情况, 出现了hash碰撞, 即通过key的hash获取到了元素, 则要判断这个key是否在这个元素对应的桶内</p>\n<ul>\n<li><p>对数组的这个元素进行加锁, 确保只有一个线程能操作这个元素对于的桶（链表或红黑树）</p>\n</li>\n<li><p>再次获取元素判断</p>\n</li>\n<li><p>通过hash值来判断这个元素结点是链表还是红黑树</p>\n<ul>\n<li>链表, 则循环链表, 如果hash和key都相同, 则表示是覆盖已有key的操作, 否则遍历到链表尾, 将新元素结点添加到链表尾部</li>\n<li>红黑树, 将新元素结点添加到树里</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加锁, f是数组Table的元素, 对其加锁保证多个线程只能一个线程操作当前元素对应的桶</span></span><br><span class=\"line\"><span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 链表的hash值是正数或0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 循环链表</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                K ek;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 当key相同时, 表示key已经存在了, 进行值覆盖操作</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp; ((ek = e.key) == key || (ek != <span class=\"keyword\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                    oldVal = e.val;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                        e.val = value;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 把新的元素结点添加到链表尾部</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    pred.next = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 元素结点是红黑树</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; p;</span><br><span class=\"line\">            binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key, value)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                oldVal = p.val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                    p.val = value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"链表转红黑树\"><a href=\"#链表转红黑树\" class=\"headerlink\" title=\"链表转红黑树\"></a>链表转红黑树</h3><ul>\n<li><p>当添加元素完成后, 判断当前链表长度是否大于8, 如果是8则调用转换红黑树方法</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 链表长度大于等于8则进入转换方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">        treeifyBin(tab, i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldVal != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>进入转换方法, 再次判断Table元素结点是否小于64个, 如果小于则只进行扩容, 大于等于64个则转成红黑树</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">treeifyBin</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;K,V&gt; b; <span class=\"keyword\">int</span> n, sc;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 先判断数组Table的元素个数是否小于64个, 小于的话调用扩容方法</span></span><br><span class=\"line\">\t\t    <span class=\"keyword\">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class=\"line\">\t\t        tryPresize(n &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 大于等于64个元素进行转成红黑树操作</span></span><br><span class=\"line\">\t\t    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((b = tabAt(tab, index)) != <span class=\"keyword\">null</span> &amp;&amp; b.hash &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t        <span class=\"keyword\">synchronized</span> (b) &#123;</span><br><span class=\"line\">\t\t            <span class=\"keyword\">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class=\"line\">\t\t                TreeNode&lt;K,V&gt; hd = <span class=\"keyword\">null</span>, tl = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t                <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = b; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">\t\t                    TreeNode&lt;K,V&gt; p =</span><br><span class=\"line\">\t\t                        <span class=\"keyword\">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t                    <span class=\"keyword\">if</span> ((p.prev = tl) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t                        hd = p;</span><br><span class=\"line\">\t\t                    <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t                        tl.next = p;</span><br><span class=\"line\">\t\t                    tl = p;</span><br><span class=\"line\">\t\t                &#125;</span><br><span class=\"line\">\t\t                setTabAt(tab, index, <span class=\"keyword\">new</span> TreeBin&lt;K,V&gt;(hd));</span><br><span class=\"line\">\t\t            &#125;</span><br><span class=\"line\">\t\t        &#125;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"统计操作\"><a href=\"#统计操作\" class=\"headerlink\" title=\"统计操作\"></a>统计操作</h3><ul>\n<li><p>添加完成后进行元素个数统计操作</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addCount(<span class=\"number\">1L</span>, binCount);</span><br></pre></td></tr></table></figure></li>\n<li><p>进入统计方法</p>\n<p>  当添加操作完成后需要对当前元素个数据进行累加操作, 而多线程操作时的累加操作会发生并发问题, 此处采用一个bashCount和一个数组的形式进行计算, 当bashCount累加操作失败时, 则将累加的值在数组中进行累加, 最终的元素个数是bashCount和数组各个元素的总和</p>\n<p>  统计元素个数完成后, 计算当前元素的总个数, 再判断是否超出阈值进行扩容处理</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加计数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addCount</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">int</span> check)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// CounterCell数组就是保存元素个数的数组</span></span><br><span class=\"line\">    CounterCell[] as; <span class=\"keyword\">long</span> b, s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"keyword\">null</span> || !U.compareAndSwapLong(<span class=\"keyword\">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class=\"line\">        CounterCell a; <span class=\"keyword\">long</span> v; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> uncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as == <span class=\"keyword\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> || (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class=\"keyword\">null</span> || !(uncontended = U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 关键方法, 进行元素个数添加操作</span></span><br><span class=\"line\">\t\t\t\t\t\tfullAddCount(x, uncontended);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 统计数组元素个数</span></span><br><span class=\"line\">        s = sumCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当发生添加操作时进入此逻辑判断是否要对数组扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab, nt; <span class=\"keyword\">int</span> n, sc;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 此时sizeCtl保存的是扩容阈值, s为当前数组元素个数, 此处判断是否需要扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s &gt;= (<span class=\"keyword\">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rs = resizeStamp(n);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 小于0则表示当前有线程在扩容, 进行协助扩容操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> || sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class=\"keyword\">null</span> || transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    transfer(tab, nt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 大于等于0表示开始扩容, 同时将sizeCtl的值设置成负数</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class=\"number\">2</span>))</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 扩容方法</span></span><br><span class=\"line\">                transfer(tab, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            s = sumCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"添加计数\"><a href=\"#添加计数\" class=\"headerlink\" title=\"添加计数\"></a>添加计数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">fullAddCount</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">boolean</span> wasUncontended)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 计算统计数组的hash值</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> ((h = ThreadLocalRandom.getProbe()) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t      ThreadLocalRandom.localInit();      <span class=\"comment\">// force initialization</span></span><br><span class=\"line\">\t      h = ThreadLocalRandom.getProbe();</span><br><span class=\"line\">\t      wasUncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">boolean</span> collide = <span class=\"keyword\">false</span>;                <span class=\"comment\">// True if last slot nonempty</span></span><br><span class=\"line\">\t  <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t      CounterCell[] as; CounterCell a; <span class=\"keyword\">int</span> n; <span class=\"keyword\">long</span> v;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// baseCount添加失败了, 同时数组不为空</span></span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"keyword\">null</span> &amp;&amp; (n = as.length) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// hash对应数组元素为空, 进行创建元素</span></span><br><span class=\"line\">\t          <span class=\"keyword\">if</span> ((a = as[(n - <span class=\"number\">1</span>) &amp; h]) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t              <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span>) &#123;            <span class=\"comment\">// Try to attach new Cell</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 调用有参构造器进行创建对象</span></span><br><span class=\"line\">\t                  CounterCell r = <span class=\"keyword\">new</span> CounterCell(x); <span class=\"comment\">// Optimistic create</span></span><br><span class=\"line\">\t                  <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span> &amp;&amp; U.compareAndSwapInt(<span class=\"keyword\">this</span>, CELLSBUSY, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t                      <span class=\"keyword\">boolean</span> created = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t                      <span class=\"keyword\">try</span> &#123;               <span class=\"comment\">// Recheck under lock</span></span><br><span class=\"line\">\t                          CounterCell[] rs; <span class=\"keyword\">int</span> m, j;</span><br><span class=\"line\">\t                          <span class=\"keyword\">if</span> ((rs = counterCells) != <span class=\"keyword\">null</span> &amp;&amp; (m = rs.length) &gt; <span class=\"number\">0</span> &amp;&amp; rs[j = (m - <span class=\"number\">1</span>) &amp; h] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t                              rs[j] = r;</span><br><span class=\"line\">\t                              created = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t                          &#125;</span><br><span class=\"line\">\t                      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t                          cellsBusy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t                      &#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 经过一系列判断, 创建成功跳出循环, 否则下次循环</span></span><br><span class=\"line\">\t                      <span class=\"keyword\">if</span> (created)</span><br><span class=\"line\">\t                          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t                      <span class=\"keyword\">continue</span>;           <span class=\"comment\">// Slot is now non-empty</span></span><br><span class=\"line\">\t                  &#125;</span><br><span class=\"line\">\t              &#125;</span><br><span class=\"line\">\t              collide = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t          &#125;</span><br><span class=\"line\">\t          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!wasUncontended)       <span class=\"comment\">// CAS already known to fail</span></span><br><span class=\"line\">\t              wasUncontended = <span class=\"keyword\">true</span>;      <span class=\"comment\">// Continue after rehash</span></span><br><span class=\"line\">\t          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))</span><br><span class=\"line\">\t              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 数组大小超出CPU核数</span></span><br><span class=\"line\">\t          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (counterCells != as || n &gt;= NCPU)</span><br><span class=\"line\">\t              collide = <span class=\"keyword\">false</span>;            <span class=\"comment\">// At max size or stale</span></span><br><span class=\"line\">\t          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!collide)</span><br><span class=\"line\">\t              collide = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span> &amp;&amp; U.compareAndSwapInt(<span class=\"keyword\">this</span>, CELLSBUSY, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t                  <span class=\"keyword\">if</span> (counterCells == as) &#123;<span class=\"comment\">// Expand table unless stale</span></span><br><span class=\"line\">\t                      CounterCell[] rs = <span class=\"keyword\">new</span> CounterCell[n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">\t                      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t                          rs[i] = as[i];</span><br><span class=\"line\">\t                      counterCells = rs;</span><br><span class=\"line\">\t                  &#125;</span><br><span class=\"line\">\t              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t                  cellsBusy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t              &#125;</span><br><span class=\"line\">\t              collide = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t              <span class=\"keyword\">continue</span>;                   <span class=\"comment\">// Retry with expanded table</span></span><br><span class=\"line\">\t          &#125;</span><br><span class=\"line\">\t          h = ThreadLocalRandom.advanceProbe(h);</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 数组为空, 则进行创建数组操作</span></span><br><span class=\"line\">\t      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span> &amp;&amp; counterCells == as &amp;&amp; U.compareAndSwapInt(<span class=\"keyword\">this</span>, CELLSBUSY, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t          <span class=\"keyword\">boolean</span> init = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t          <span class=\"keyword\">try</span> &#123;                           <span class=\"comment\">// Initialize table</span></span><br><span class=\"line\">\t              <span class=\"keyword\">if</span> (counterCells == as) &#123;</span><br><span class=\"line\">\t                  CounterCell[] rs = <span class=\"keyword\">new</span> CounterCell[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t                  rs[h &amp; <span class=\"number\">1</span>] = <span class=\"keyword\">new</span> CounterCell(x);</span><br><span class=\"line\">\t                  counterCells = rs;</span><br><span class=\"line\">\t                  init = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t              &#125;</span><br><span class=\"line\">\t          &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t              cellsBusy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t          &#125;</span><br><span class=\"line\">\t          <span class=\"keyword\">if</span> (init)</span><br><span class=\"line\">\t              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 优先尝试对baseCount进行累加操作, 操作成功就跳出循环, 否则进行下次循环进入对数组操作逻辑</span></span><br><span class=\"line\">\t      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapLong(<span class=\"keyword\">this</span>, BASECOUNT, v = baseCount, v + x))</span><br><span class=\"line\">\t          <span class=\"keyword\">break</span>;                          <span class=\"comment\">// Fall back on using base</span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扩容方法\"><a href=\"#扩容方法\" class=\"headerlink\" title=\"扩容方法\"></a>扩容方法</h3><ul>\n<li><p>扩容有两种情况, 当前线程扩容和协助扩容</p>\n<p>  扩容的原理, 多线程可能同时进行扩容, 那么将整个数组根据CPU核数计算出平均的段, 每个线程处理一个段, 当处理完一个元素结点后, 在这个位置放置一个ForwardingNode元素结点占位表示正在处理, 即MOVED</p>\n<p>  新建一个2倍原数组大小的nextTable数组,用来保存扩容后的新数组</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = tab.length, stride;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据当前CPU核数计算要处理的段大小, 最小16个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((stride = (NCPU &gt; <span class=\"number\">1</span>) ? (n &gt;&gt;&gt; <span class=\"number\">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class=\"line\">        stride = MIN_TRANSFER_STRIDE; <span class=\"comment\">// subdivide range</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 新数组为null, 则创建2倍大的新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextTab == <span class=\"keyword\">null</span>) &#123;            <span class=\"comment\">// initiating</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">            nextTab = nt;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;      <span class=\"comment\">// try to cope with OOME</span></span><br><span class=\"line\">            sizeCtl = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nextTable = nextTab;</span><br><span class=\"line\">        transferIndex = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nextn = nextTab.length;</span><br><span class=\"line\">    ForwardingNode&lt;K,V&gt; fwd = <span class=\"keyword\">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> finishing = <span class=\"keyword\">false</span>; <span class=\"comment\">// to ensure sweep before committing nextTab</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, bound = <span class=\"number\">0</span>;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"keyword\">int</span> fh;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (advance) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nextIndex, nextBound;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--i &gt;= bound || finishing)</span><br><span class=\"line\">                advance = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((nextIndex = transferIndex) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                i = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt (<span class=\"keyword\">this</span>, TRANSFERINDEX, nextIndex, nextBound = (nextIndex &gt; stride ? nextIndex - stride : <span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">                bound = nextBound;</span><br><span class=\"line\">                i = nextIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 扩容完成, 将新的table赋值给原table</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (finishing) &#123;</span><br><span class=\"line\">                nextTable = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                table = nextTab;</span><br><span class=\"line\">                sizeCtl = (n &lt;&lt; <span class=\"number\">1</span>) - (n &gt;&gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 判断是否扩容完成</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc = sizeCtl, sc - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc - <span class=\"number\">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                finishing = advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                i = n; <span class=\"comment\">// recheck before commit</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i)) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            advance = casTabAt(tab, i, <span class=\"keyword\">null</span>, fwd);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            advance = <span class=\"keyword\">true</span>; <span class=\"comment\">// already processed</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    Node&lt;K,V&gt; ln, hn;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> runBit = fh &amp; n;</span><br><span class=\"line\">                        Node&lt;K,V&gt; lastRun = f;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class=\"keyword\">null</span>; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> b = p.hash &amp; n;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (b != runBit) &#123;</span><br><span class=\"line\">                                runBit = b;</span><br><span class=\"line\">                                lastRun = p;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (runBit == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            ln = lastRun;</span><br><span class=\"line\">                            hn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            hn = lastRun;</span><br><span class=\"line\">                            ln = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((ph &amp; n) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                                ln = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hn = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; lo = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; hi = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> lc = <span class=\"number\">0</span>, hc = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> h = e.hash;</span><br><span class=\"line\">                            TreeNode&lt;K,V&gt; p = <span class=\"keyword\">new</span> TreeNode&lt;K,V&gt;</span><br><span class=\"line\">                                (h, e.key, e.val, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((h &amp; n) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = loTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                    lo = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    loTail.next = p;</span><br><span class=\"line\">                                loTail = p;</span><br><span class=\"line\">                                ++lc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = hiTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                    hi = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    hiTail.next = p;</span><br><span class=\"line\">                                hiTail = p;</span><br><span class=\"line\">                                ++hc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class=\"line\">                            (hc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class=\"line\">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class=\"line\">                            (lc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}